<?xml version='1.0' encoding='utf-8'?>
<?grc format='1' created='3.7.11'?>
<flow_graph>
  <timestamp>Mon Nov  5 15:30:13 2018</timestamp>
  <block>
    <key>options</key>
    <param>
      <key>author</key>
      <value></value>
    </param>
    <param>
      <key>window_size</key>
      <value>2200,2000</value>
    </param>
    <param>
      <key>category</key>
      <value>[GRC Hier Blocks]</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>description</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(8, 8)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>generate_options</key>
      <value>qt_gui</value>
    </param>
    <param>
      <key>hier_block_src_path</key>
      <value>.:</value>
    </param>
    <param>
      <key>id</key>
      <value>main_general</value>
    </param>
    <param>
      <key>max_nouts</key>
      <value>0</value>
    </param>
    <param>
      <key>qt_qss_theme</key>
      <value></value>
    </param>
    <param>
      <key>realtime_scheduling</key>
      <value></value>
    </param>
    <param>
      <key>run_command</key>
      <value>{python} -u {filename}</value>
    </param>
    <param>
      <key>run_options</key>
      <value>prompt</value>
    </param>
    <param>
      <key>run</key>
      <value>True</value>
    </param>
    <param>
      <key>thread_safe_setters</key>
      <value></value>
    </param>
    <param>
      <key>title</key>
      <value></value>
    </param>
  </block>
  <block>
    <key>variable_qtgui_range</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>1</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(184, 888)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>bch</value>
    </param>
    <param>
      <key>label</key>
      <value>bch</value>
    </param>
    <param>
      <key>min_len</key>
      <value>200</value>
    </param>
    <param>
      <key>orient</key>
      <value>Qt.Horizontal</value>
    </param>
    <param>
      <key>start</key>
      <value>0</value>
    </param>
    <param>
      <key>step</key>
      <value>.1</value>
    </param>
    <param>
      <key>stop</key>
      <value>10</value>
    </param>
    <param>
      <key>rangeType</key>
      <value>float</value>
    </param>
    <param>
      <key>widget</key>
      <value>counter_slider</value>
    </param>
  </block>
  <block>
    <key>variable_constellation</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>const_points</key>
      <value>[-1-1j, -1+1j, 1+1j, 1-1j]</value>
    </param>
    <param>
      <key>type</key>
      <value>qpsk</value>
    </param>
    <param>
      <key>dims</key>
      <value>1</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1160, 92)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>constel</value>
    </param>
    <param>
      <key>rot_sym</key>
      <value>4</value>
    </param>
    <param>
      <key>soft_dec_lut</key>
      <value>None</value>
    </param>
    <param>
      <key>precision</key>
      <value>8</value>
    </param>
    <param>
      <key>sym_map</key>
      <value>[0, 1, 3, 2]</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1712, 140)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>eb</value>
    </param>
    <param>
      <key>value</key>
      <value>0.22</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1240, 4)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>frame_len</value>
    </param>
    <param>
      <key>value</key>
      <value>(T_bch+T_sync+len(bs_slots)*(T_s+T_g)+T_p)/float(1000)</value>
    </param>
  </block>
  <block>
    <key>variable_qtgui_range</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>0</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1482, 0)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>freq_offset</value>
    </param>
    <param>
      <key>label</key>
      <value>Frequency Offset (Multiples of Sub-carrier spacing)</value>
    </param>
    <param>
      <key>min_len</key>
      <value>200</value>
    </param>
    <param>
      <key>orient</key>
      <value>Qt.Horizontal</value>
    </param>
    <param>
      <key>start</key>
      <value>-.1</value>
    </param>
    <param>
      <key>step</key>
      <value>.00001</value>
    </param>
    <param>
      <key>stop</key>
      <value>.1</value>
    </param>
    <param>
      <key>rangeType</key>
      <value>float</value>
    </param>
    <param>
      <key>widget</key>
      <value>counter_slider</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1664, 212)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>nfilts</value>
    </param>
    <param>
      <key>value</key>
      <value>32</value>
    </param>
  </block>
  <block>
    <key>variable_qtgui_range</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>0</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1336, 0)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>noise_voltage</value>
    </param>
    <param>
      <key>label</key>
      <value>Noise Amplitude</value>
    </param>
    <param>
      <key>min_len</key>
      <value>200</value>
    </param>
    <param>
      <key>orient</key>
      <value>Qt.Horizontal</value>
    </param>
    <param>
      <key>start</key>
      <value>0</value>
    </param>
    <param>
      <key>step</key>
      <value>.001</value>
    </param>
    <param>
      <key>stop</key>
      <value>1</value>
    </param>
    <param>
      <key>rangeType</key>
      <value>float</value>
    </param>
    <param>
      <key>widget</key>
      <value>counter_slider</value>
    </param>
  </block>
  <block>
    <key>variable_qtgui_range</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>0</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1336, 120)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>phase</value>
    </param>
    <param>
      <key>label</key>
      <value>taps phase</value>
    </param>
    <param>
      <key>min_len</key>
      <value>200</value>
    </param>
    <param>
      <key>orient</key>
      <value>Qt.Horizontal</value>
    </param>
    <param>
      <key>start</key>
      <value>0</value>
    </param>
    <param>
      <key>step</key>
      <value>.01</value>
    </param>
    <param>
      <key>stop</key>
      <value>2*3.14</value>
    </param>
    <param>
      <key>rangeType</key>
      <value>float</value>
    </param>
    <param>
      <key>widget</key>
      <value>counter_slider</value>
    </param>
  </block>
  <block>
    <key>variable_rrc_filter_taps</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>alpha</key>
      <value>eb</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1480, 120)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>gain</key>
      <value>nfilts*5</value>
    </param>
    <param>
      <key>id</key>
      <value>rx_psf_taps</value>
    </param>
    <param>
      <key>ntaps</key>
      <value>5*sps*nfilts</value>
    </param>
    <param>
      <key>samp_rate</key>
      <value>sps*nfilts</value>
    </param>
    <param>
      <key>sym_rate</key>
      <value>1.0</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(16, 92)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>value</key>
      <value>1e6</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1640, 140)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>sps</value>
    </param>
    <param>
      <key>value</key>
      <value>2</value>
    </param>
  </block>
  <block>
    <key>variable_qtgui_range</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>1</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1648, 0)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>time_offset</value>
    </param>
    <param>
      <key>label</key>
      <value>Timing Offset</value>
    </param>
    <param>
      <key>min_len</key>
      <value>200</value>
    </param>
    <param>
      <key>orient</key>
      <value>Qt.Horizontal</value>
    </param>
    <param>
      <key>start</key>
      <value>0.995</value>
    </param>
    <param>
      <key>step</key>
      <value>0.00001</value>
    </param>
    <param>
      <key>stop</key>
      <value>1.005</value>
    </param>
    <param>
      <key>rangeType</key>
      <value>float</value>
    </param>
    <param>
      <key>widget</key>
      <value>counter_slider</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(426, 16)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>M</value>
    </param>
    <param>
      <key>label</key>
      <value></value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>32</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(320, 16)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>N</value>
    </param>
    <param>
      <key>label</key>
      <value></value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(800, 108)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>T_bch</value>
    </param>
    <param>
      <key>label</key>
      <value>BCH duration (ms)</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>20</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(472, 108)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>T_g</value>
    </param>
    <param>
      <key>label</key>
      <value>Guard time duration (ms)</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>20</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(952, 108)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>T_p</value>
    </param>
    <param>
      <key>label</key>
      <value>Processing duration (ms)</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>50</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(320, 108)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>T_s</value>
    </param>
    <param>
      <key>label</key>
      <value>Slot duration (ms)</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>50</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(632, 108)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>T_sync</value>
    </param>
    <param>
      <key>label</key>
      <value>Sync duration (ms)</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>50</value>
    </param>
  </block>
  <block>
    <key>blocks_char_to_float</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1600, 1580)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_char_to_float_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>scale</key>
      <value>1</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_complex_to_arg</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(280, 1608)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_complex_to_arg_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_complex_to_float</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1552, 1032)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_complex_to_float_0_0_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_complex_to_mag_squared</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(264, 1032)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_complex_to_mag_squared_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_delay</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>delay</key>
      <value>1</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(456, 1580)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_delay_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>num_ports</key>
      <value>1</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_float_to_complex</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(824, 1584)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_float_to_complex_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_keep_m_in_n</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(432, 732)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_keep_m_in_n_0</value>
    </param>
    <param>
      <key>m</key>
      <value>M</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>n</key>
      <value>int(M*(1+cp_ratio))</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>offset</key>
      <value>int(cp_ratio*M)</value>
    </param>
  </block>
  <block>
    <key>blocks_keep_one_in_n</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>2</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1152, 748)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_keep_one_in_n_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>n</key>
      <value>2</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_keep_one_in_n</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1160, 844)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_keep_one_in_n_1</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>n</key>
      <value>M*2</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_message_debug</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1736, 296)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_message_debug_0</value>
    </param>
  </block>
  <block>
    <key>blocks_null_sink</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>bus_conns</key>
      <value>[[0,],]</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(56, 1032)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>180</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_null_sink_0_0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>num_inputs</key>
      <value>1</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_pdu_to_tagged_stream</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(456, 1844)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_pdu_to_tagged_stream_0</value>
    </param>
    <param>
      <key>type</key>
      <value>byte</value>
    </param>
    <param>
      <key>tag</key>
      <value>packet_len</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>blocks_pdu_to_tagged_stream</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(424, 1740)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_pdu_to_tagged_stream_0_0</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>tag</key>
      <value>packet_len</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>blocks_repack_bits_bb</key>
    <param>
      <key>k</key>
      <value>1</value>
    </param>
    <param>
      <key>l</key>
      <value>8</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>endianness</key>
      <value>gr.GR_MSB_FIRST</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(712, 412)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_repack_bits_bb_1</value>
    </param>
    <param>
      <key>len_tag_key</key>
      <value>burst</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>align_output</key>
      <value>True</value>
    </param>
  </block>
  <block>
    <key>blocks_repack_bits_bb</key>
    <param>
      <key>k</key>
      <value>8</value>
    </param>
    <param>
      <key>l</key>
      <value>1</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>endianness</key>
      <value>gr.GR_MSB_FIRST</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1416, 1908)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_repack_bits_bb_2_2</value>
    </param>
    <param>
      <key>len_tag_key</key>
      <value>"packet_len"</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>align_output</key>
      <value>False</value>
    </param>
  </block>
  <block>
    <key>blocks_socket_pdu</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1728, 420)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>host</key>
      <value></value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_socket_pdu_0</value>
    </param>
    <param>
      <key>mtu</key>
      <value>10000</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>port</key>
      <value>52002</value>
    </param>
    <param>
      <key>tcp_no_delay</key>
      <value>True</value>
    </param>
    <param>
      <key>type</key>
      <value>"UDP_SERVER"</value>
    </param>
  </block>
  <block>
    <key>blocks_stream_mux</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1032, 1600)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_stream_mux_0</value>
    </param>
    <param>
      <key>lengths</key>
      <value>1, M-1</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>num_inputs</key>
      <value>2</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_stream_to_tagged_stream</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(176, 1308)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_stream_to_tagged_stream_0</value>
    </param>
    <param>
      <key>len_tag_key</key>
      <value>"packet_len2"</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>packet_len</key>
      <value>int(M*(1+cp_ratio))</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_stream_to_vector</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(592, 748)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_stream_to_vector_0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>num_items</key>
      <value>M</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_stream_to_vector</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(752, 1484)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_stream_to_vector_1</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>num_items</key>
      <value>M</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_sub_xx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(648, 1584)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_sub_xx_0_0</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>num_inputs</key>
      <value>2</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_tag_gate</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(456, 1628)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_tag_gate_0</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>propagate_tags</key>
      <value>False</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_tag_gate</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1592, 1188)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_tag_gate_0_0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>propagate_tags</key>
      <value>False</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_tagged_stream_mux</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1200, 1904)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_tagged_stream_mux_0</value>
    </param>
    <param>
      <key>type</key>
      <value>byte</value>
    </param>
    <param>
      <key>lengthtagname</key>
      <value>packet_len</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>ninputs</key>
      <value>2</value>
    </param>
    <param>
      <key>tag_preserve_head_pos</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_tagged_stream_to_pdu</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(944, 420)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_tagged_stream_to_pdu_0_0</value>
    </param>
    <param>
      <key>type</key>
      <value>byte</value>
    </param>
    <param>
      <key>tag</key>
      <value>burst</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>blocks_tagged_stream_to_pdu</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(424, 1316)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_tagged_stream_to_pdu_0_0_0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>tag</key>
      <value>packet_len2</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>blocks_throttle</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1104, 1188)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_throttle_0</value>
    </param>
    <param>
      <key>ignoretag</key>
      <value>True</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>samples_per_second</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_vector_source_x</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(856, 1676)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_vector_source_x_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>repeat</key>
      <value>True</value>
    </param>
    <param>
      <key>tags</key>
      <value>[]</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
    <param>
      <key>vector</key>
      <value>[0]*(M-1)</value>
    </param>
  </block>
  <block>
    <key>blocks_vector_to_stream</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(976, 844)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_vector_to_stream_0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>num_items</key>
      <value>M</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(200, 108)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>bs_slots</value>
    </param>
    <param>
      <key>label</key>
      <value>BS Slots</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>range(6)</value>
    </param>
  </block>
  <block>
    <key>channels_channel_model</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>block_tags</key>
      <value>False</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>epsilon</key>
      <value>time_offset</value>
    </param>
    <param>
      <key>freq_offset</key>
      <value>freq_offset</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1328, 1152)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>channels_channel_model_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>noise_voltage</key>
      <value>noise_voltage</value>
    </param>
    <param>
      <key>seed</key>
      <value>0</value>
    </param>
    <param>
      <key>taps</key>
      <value>complex(np.cos(phase),np.sin(phase))</value>
    </param>
  </block>
  <block>
    <key>channels_channel_model</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>block_tags</key>
      <value>True</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>epsilon</key>
      <value>time_offset</value>
    </param>
    <param>
      <key>freq_offset</key>
      <value>freq_offset</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(568, 880)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>channels_channel_model_0_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>noise_voltage</key>
      <value>noise_voltage</value>
    </param>
    <param>
      <key>seed</key>
      <value>0</value>
    </param>
    <param>
      <key>taps</key>
      <value>complex(np.cos(phase),np.sin(phase))</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(208, 1724)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>control</value>
    </param>
    <param>
      <key>label</key>
      <value>Access control</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>'basic'</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(789, 16)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>cp_ratio</value>
    </param>
    <param>
      <key>label</key>
      <value></value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>0.25</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('Data/Slot Mux \n&amp; Decrypt ID', 'blk', [], [('frame_n', 'message', 1), ('data', 'message', 1), ('slot_n', 'message', 1)], [('final_msg', 'message', 1)], 'Embedded Python Block example', [])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required  to have default values!
"""

import numpy as np
import pmt
import time
import random
import threading
from gnuradio import gr, gr_unittest, blocks

from Crypto.Cipher import AES
import base64


class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block
    """Embedded Python Block example"""

    def __init__(self):  # only default arguments here
        """arguments to this function show up as parameters in GRC"""
        gr.sync_block.__init__(
            self,
            name='Data/Slot Mux \n&amp; Decrypt ID',   # will show up in GRC
            in_sig=[],
            out_sig=[]
        )
        self.message_port_register_in(pmt.to_pmt("data"))        
        self.set_msg_handler(pmt.intern("data"), self.handle_data)
        self.message_port_register_in(pmt.to_pmt("slot_n"))
        self.set_msg_handler(pmt.intern("slot_n"), self.handle_slot)
        self.message_port_register_in(pmt.to_pmt("frame_n"))
        self.set_msg_handler(pmt.intern("frame_n"), self.handle_frame)        
        
        self.message_port_register_out(pmt.to_pmt("final_msg"))

        self.lock = threading.Lock()

        self.slot_n = -1
        self.frame_n = 0
        self.frame_msg = 0
        self.data = []


    def decrypt(self,mystr) :
        secret_key = '0123456789ABCDEF' # create new &amp; store somewhere safe
        cipher = AES.new(secret_key,AES.MODE_ECB)
        try :
            decoded = cipher.decrypt(base64.b64decode(mystr))
            return decoded.strip()  # Get rid of space padding
        except :
            return False

    def handle_frame(self, msg_pmt):
        with self.lock :

            self.frame_n = pmt.to_python(pmt.cdr(msg_pmt))
            self.frame_msg = np.uint8([ord(c) for c in (str(self.frame_n[1]+1))+"\t"])
            # print self.frame_msg
    

    def handle_slot(self, msg_pmt):
        with self.lock :

            self.slot_n = pmt.to_python(pmt.cdr(msg_pmt))
            self.slot_msg = np.uint8([ord(c) for c in (str(self.slot_n[1])+"\t")])
            # print self.slot_n[1]

    def handle_data(self, msg_pmt):
        with self.lock : 
            self.data = pmt.to_python(pmt.cdr(msg_pmt))
            # self.data = np.delete(self.data,-1)     # Delete \n
            l = [chr(c) for c in self.data]
            l = ''.join(l)
            # ID = self.decrypt(l[:24])
            # # print ID
            
            # # print "Successful decryption of ID : " + ID
            # l = ID + "\t" + l[24:]
            l = list(l)
            self.data = [ord(c) for c in l]     # We replace the crypted part with the decrypted one
            ID = False
            # print self.data
            if self.slot_n &gt;= 0 :
                res = np.append(self.slot_msg, self.data)
                res = np.append(self.frame_msg, res)
                res = res.tolist()
                # print res
                res_pdu = pmt.cons(pmt.make_dict(), pmt.init_u8vector(len(res),res))
                self.message_port_pub(pmt.to_pmt("final_msg"), res_pdu)


            # if any([ID]) :      # Check if Crypted ID is valid
            #     # print "Successful decryption of ID : " + ID
            #     l = ID + "\t" + l[24:]
            #     l = list(l)
            #     self.data = [ord(c) for c in l]     # We replace the crypted part with the decrypted one
            #     ID = False
            #     if self.slot_n &gt;= 0 :
            #         res = np.append(self.slot_msg, self.data)
            #         res = np.append(self.frame_msg, res)
            #         res = res.tolist()
            #         # print res
            #         res_pdu = pmt.cons(pmt.make_dict(), pmt.init_u8vector(len(res),res))
            #         self.message_port_pub(pmt.to_pmt("final_msg"), res_pdu)                    </value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1392, 392)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>data_slot_mux</value>
    </param>
  </block>
  <block>
    <key>blocks_multiply_const_vxx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>const</key>
      <value>bch</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(416, 916)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>dddd</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>digital_chunks_to_symbols_xx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>dimension</key>
      <value>2</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(184, 1476)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_chunks_to_symbols_xx_0</value>
    </param>
    <param>
      <key>in_type</key>
      <value>byte</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>num_ports</key>
      <value>1</value>
    </param>
    <param>
      <key>out_type</key>
      <value>complex</value>
    </param>
    <param>
      <key>symbol_table</key>
      <value>constel.points()</value>
    </param>
  </block>
  <block>
    <key>digital_constellation_decoder_cb</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>constellation</key>
      <value>constel</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1800, 748)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_constellation_decoder_cb_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>digital_corr_est_cc</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(48, 1072)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_corr_est_cc_0_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>sps</key>
      <value>1</value>
    </param>
    <param>
      <key>symbols</key>
      <value>zc</value>
    </param>
    <param>
      <key>mark_delay</key>
      <value>0</value>
    </param>
    <param>
      <key>threshold</key>
      <value>.99</value>
    </param>
  </block>
  <block>
    <key>digital_correlate_access_code_xx_ts</key>
    <param>
      <key>access_code</key>
      <value>digital.packet_utils.default_access_code</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>Correlates with access code to extract the payload.</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(384, 404)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_correlate_access_code_xx_ts_1</value>
    </param>
    <param>
      <key>type</key>
      <value>byte</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>tagname</key>
      <value>burst</value>
    </param>
    <param>
      <key>threshold</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>digital_costas_loop_cc</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1344, 720)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_costas_loop_cc_0</value>
    </param>
    <param>
      <key>w</key>
      <value>2*3.14/100</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>order</key>
      <value>2</value>
    </param>
    <param>
      <key>use_snr</key>
      <value>False</value>
    </param>
  </block>
  <block>
    <key>digital_diff_decoder_bb</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(192, 420)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_diff_decoder_bb_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>modulus</key>
      <value>2</value>
    </param>
  </block>
  <block>
    <key>digital_diff_encoder_bb</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1608, 1916)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_diff_encoder_bb_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>modulus</key>
      <value>2</value>
    </param>
  </block>
  <block>
    <key>digital_ofdm_cyclic_prefixer</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>cp_len</key>
      <value>M/4</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>input_size</key>
      <value>M</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1256, 1464)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_ofdm_cyclic_prefixer_0</value>
    </param>
    <param>
      <key>tagname</key>
      <value></value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>rolloff</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>digital_protocol_formatter_bb</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>format</key>
      <value>hdr_format</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1184, 1796)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>digital_protocol_formatter_bb_0</value>
    </param>
    <param>
      <key>len_tag_key</key>
      <value>packet_len</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>bch_time</key>
      <value>T_bch</value>
    </param>
    <param>
      <key>Beacon_Sequence</key>
      <value>zc</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('BS Scheduler', 'blk', [('num_slots', '5'), ('bch_time', '20'), ('Sync_time', '50'), ('guard_time', '100'), ('Slot_time', '50'), ('Proc_time', '50'), ('Beacon_Sequence', '[0]'), ('sample_rate', '200000')], [('0', 'complex', 1)], [('0', 'complex', 1), ('1', 'complex', 1)], 'EPHYL Demo : Base Station \n    - All durations are expressed in millisecond', ['num_slots'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>
"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required to have default values!
"""

import numpy as np
from gnuradio import gr
import time
import threading
import pmt

IDLE = 0
BCH = 1
SYNC = 2
PUSCH = 3
GUARD = 4
PROC = 5

# state = {"IDLE" : 0, "BCH" : 1, "SYNC" : 2, "PUSCH" : 3, "GUARD" : 4} 
# STATE_K = sorted(state.keys())
# STATE_V = sorted(state.values())


class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block
    """EPHYL Demo : Base Station 
    - All durations are expressed in millisecond"""

    def __init__(self, num_slots=5,
        bch_time=20, Sync_time=50, guard_time=100, Slot_time=50, Proc_time = 50, 
        Beacon_Sequence=[0],sample_rate=200000):  
        """arguments to this function show up as parameters in GRC"""
        gr.sync_block.__init__(
            self,
            name='BS Scheduler',   # will show up in GRC
            in_sig=[np.complex64],
            out_sig=[np.complex64,np.complex64]
        )


        # self.message_port_register_out(pmt.intern("slot_n"))
        ##################################################
        # Parameters
        ##################################################
        # self.T_bch = T_bch        
        # self.T_g = guard_time
        # self.T_rf = RF_switch_time
        # self.T_s = Slot_duration
        self.num_slots = num_slots
        self.bcn = Beacon_Sequence
        self.samp_rate = int(sample_rate/1000)
        # self.samp_rate = int(sample_rate/1000)

        ##################################################
        # Variables
        ##################################################
        # self.state = -1
        self.state = IDLE  # DEBUG (no uhd)
        self.state_dbg = -1
        self.slot_cnt_dbg = -1
        self.slot_cnt = -1
        self.rx_time = 0
        self.timer = 0
        self.samp_cnt = 0
        self.samp_cnt_abs = 0
        self.to_return1 = 0
        self.bcn_sent = False
        self.frame_cnt = 0

        self.diff = self.left = 0

        ## Here we set states data, 
        ## PS : SYNC has a constant offset of +guard_time to compensate the LISTEN state of the sensor nodes
        ## Have a look at the same variable in the sensor scheduler block
        self.STATES = [range(6) \
            ,['IDLE','BCH','SYNC','PUSCH','GUARD','PROC'] \
            ,[0,bch_time,Sync_time,Slot_time,guard_time,Proc_time]]

        # self.frame_time = self.T_bch + self.T_rf + num_slots*(self.T_s+self.T_g) + self.T_rf

        self.lock = threading.Lock()  

    def to_time(self,n_samp) :
        return n_samp/float(self.samp_rate)

    def to_samples(self,duration) :
        return int(duration*self.samp_rate)

    def next_state(self) :
        # state = self.STATES[0][int((state+1)%len(self.STATES[0]))]
        if self.state &lt; len(self.STATES[0])-1 :
            self.state += 1
        else :
            self.state = 0

    def run_state(self,Input,output1,output2) :

        state_samp = self.to_samples(self.STATES[2][self.state])
        self.diff = state_samp-self.samp_cnt

        ###############################################################################
        ## If the cuurent state cannot run completely, 
        ## i.e the sample count exceeds the number of samples required for the current state      
        if self.diff &lt; 0 :

            self.samp_cnt_abs += self.diff
            self.samp_cnt = 0
            output1 = np.delete(output1,slice(len(output1)+self.diff,len(output1)))    # Since diff is negative
            
            # if self.state == BCH :
            #     self.samp_cnt_abs = 0

            if self.state == SYNC :
                self.slot_cnt += 1
                # print "BS : " + str(self.nitems_written(0)+len(output1))

            elif self.state == GUARD :
                self.slot_cnt += 1
                if self.slot_cnt &lt; self.num_slots :
                    # Return to PUSCH
                    self.state -= 2

                else :
                    # print "[BS] TOTAL SLOTS + GRD TIME : " + str(self.to_time(self.samp_cnt_abs))
                    self.slot_cnt = -1

            elif self.state not in self.STATES[0] :
                print("STATE ERROR")
                exit(1)
            
            elif self.state == PUSCH : 
                output1[:] = Input[:len(output1)]
            ## DEBUG    
            # elif self.state in (SYNC,BCH) :
            # #     output1[:] = [1]*len(output1)
            #     output1[:] = Input[:len(output1)]
            else :
                output1[:] = [0]*len(output1)

            output2[:] = [0]*len(output2)
            self.next_state()
            
            # Add tags for each state
            offset = self.nitems_written(0)+len(output1)
            if self.state == PROC :
                key = pmt.intern("FRAME")
                value = pmt.to_pmt(self.frame_cnt)
                # value = pmt.to_pmt(self.frame_cnt-1)
                print "[BS] ================= FRAME " + str(self.frame_cnt) + " FINISH ================="
                self.frame_cnt += 1
                self.samp_cnt_abs = 0
                self.bcn_sent = False
            else :
                key = pmt.intern(self.STATES[1][self.state])
                value = pmt.to_pmt(self.slot_cnt)
            self.add_item_tag(0,offset, key, value)


            # if self.frame_cnt == 5 :
            #     stop()

        ###############################################################################
        ## If the cuurent state can still run completely one more time
        else :
            self.samp_cnt -= len(output1)

            if self.state == PUSCH :
                output1[:] = Input[:]

            elif self.state == BCH :
                if not(self.bcn_sent) :
                    bcn_z = self.bcn        # Some zero padding
                    max_output = min(len(output1), len(bcn_z))
                    output1 = output1[:max_output]
                    # Q = int(len(output1)/max_output)
                    # R = int(len(output1)%max_output)
                    # output1[:] = bcn_z*Q + [0]*R
                    output1[:] = bcn_z[:max_output]
                    self.bcn_sent = True
                else : 
                    output1[:] = [0]*len(output1)
                    output2[:] = [0]*len(output2)                    

            elif self.state == SYNC :
                output1[:] = [0]*len(output1)
                output2[:] = [0]*len(output2)
            else :
                output1[:] = [0]*len(output1)
                # output2[:] = [0]*len(output2)

            self.samp_cnt += len(output1)
        ###############################################################################

        if self.state != BCH :
            output1[:] = Input[:len(output1)]

        self.to_return1 = len(output1)
        # output2 = output2[:len(output1)]
        # output2[:] = [0]*len(output1)

    def work(self, input_items, output_items):
        with self.lock :

            self.samp_cnt += len(output_items[0])
            self.samp_cnt_abs += len(output_items[0])

            if self.state == -1 :
                num_input_items = len(input_items[0])
                nread = self.nitems_read(0)
                tags = self.get_tags_in_range(0, nread, nread+num_input_items)
                for tag in tags:
                    msg = pmt.cons(tag.key,tag.value)
                    msg_tup = pmt.to_python(msg)
                    if msg_tup[0] == 'rx_time' :
                        # self.rx_time = msg_tup[1][1]
                        self.rx_time = msg_tup[1][0]+msg_tup[1][1]
                        print "[BS] RX TIME : " + str(self.rx_time)
                        self.samp_cnt -= self.rx_time
                        self.samp_cnt_abs -= self.rx_time
                        self.state = IDLE
                        break
                return len(output_items[0])

            # if self.state_dbg != self.state :
            #     self.state_dbg = self.state
            #     print "[BS] STATE " + self.STATES[1][self.state] + " START : " + str(self.to_time(self.to_return1))
            #     print "[BS] STATE " + self.STATES[1][self.state] + " START : " + str(self.to_time(self.samp_cnt_abs))
                
                # if (self.state == PUSCH) :
                #     print "[BS] STATE PUSCH @ SLOT : " + str(self.slot_cnt)
                # self.samp_cnt = 0
            # else :

            if self.state == BCH :
                self.run_state(input_items[0],output_items[1],output_items[0])
            else :
                self.run_state(input_items[0],output_items[0],output_items[1])

            return self.to_return1

</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(200, 716)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>guard_time</key>
      <value>T_g</value>
    </param>
    <param>
      <key>id</key>
      <value>ephyl_bs_core</value>
    </param>
    <param>
      <key>num_slots</key>
      <value>len(bs_slots)</value>
    </param>
    <param>
      <key>Proc_time</key>
      <value>T_p</value>
    </param>
    <param>
      <key>sample_rate</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>Slot_time</key>
      <value>T_s</value>
    </param>
    <param>
      <key>Sync_time</key>
      <value>T_sync</value>
    </param>
  </block>
  <block>
    <key>ephyl_data_and_access_control</key>
    <param>
      <key>Control</key>
      <value>control</value>
    </param>
    <param>
      <key>bs_slots</key>
      <value>bs_slots</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(192, 1808)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>ephyl_data_and_access_control_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>bch_time</key>
      <value>T_bch</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('Sensor Scheduler', 'blk', [('num_slots', '5'), ('bch_time', '20'), ('Sync_time', '50'), ('guard_time', '100'), ('Slot_time', '50'), ('Proc_time', '50'), ('wanted_tag', "'corr_start'"), ('length_tag_key', "'packet_len2'"), ('samp_rate', '32000')], [('trig', 'message', 1), ('slot', 'message', 1), ('in', 'message', 1)], [('0', 'complex', 1), ('busy', 'message', 1)], 'DOCUMENTATION', ['length_tag_key', 'num_slots', 'samp_rate', 'wanted_tag'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required  to have default values!
"""

import numpy as np
import pmt
import time
import random
import threading
from gnuradio import gr, gr_unittest, blocks
import string

SLOT_READ=0
IDLE=1
PKT_GEN=2
LISTEN=3
SYNC=4
EMIT=5
GUARD =6
PROC = 7


class blk(gr.sync_block):  # others are basic_block, decim_block, interp_block
    """DOCUMENTATION"""
    def __init__(self,num_slots=5,
        bch_time=20, Sync_time=50, guard_time=100, Slot_time=50, Proc_time = 50, 
        wanted_tag="corr_start",
        length_tag_key="packet_len2",
        samp_rate = 32000):
        """arguments to this function show up as parameters in GRC"""
        gr.sync_block.__init__(
            self,
            name='Sensor Scheduler',   # will show up in GRC
            in_sig=[],
            out_sig=[np.complex64]
        )

        self.key = None
        self.Id = random.choice(string.ascii_letters) 
        self.num_slots = num_slots
        self.length_tag_key = length_tag_key
        self.samp_rate = int(samp_rate/1000)


        ## Here we set states data, 
        ## PS : LISTEN has a constant pseudo infinite duration to avoid timing/buffer overflow
        ## Processing time (PROC state) for sensor only serves to reset variables, that's why it lasts Proc_time/2 
        self.STATES = [range(8) \
            ,['SLOT_READ','IDLE','PKT_GEN','LISTEN','SYNC','EMIT','GUARD','PROC'] \
            ,[.01,.01,0.01,float("inf"),Sync_time+bch_time,Slot_time,guard_time,Proc_time/2]]

        self.wanted_tag = wanted_tag
        self.message_port_register_in(pmt.intern("in"))
        self.message_port_register_in(pmt.intern("trig"))
        self.set_msg_handler(pmt.intern("in"), self.handle_msg)
        self.set_msg_handler(pmt.intern("trig"), self.handle_trig)

        self.message_port_register_in(pmt.intern("slot"))
        self.set_msg_handler(pmt.intern("slot"), self.handle_slot)
        
        self.message_port_register_out(pmt.intern("busy"))

        self.samp_cnt = 0
        self.delay = self.delay_t = 0

        self.pdu_cnt = 0
        self.slot_cnt = 0
        
        self.test = 0
        self.msg_out = np.array([])
        self.msg_full = np.array([])

        self.state = SLOT_READ
        self.state_dbg = self.state_tag = -1
        self.trig = ''
        self.repetition = 0

        self.signal_len = 0
        self.busy = False
        self.found = False

        self.slot_msg = np.array([])

        self.slots = []

        self.lock = threading.Lock()
        self.frame_cnt = 0

        self.corr_amp = []

        self.i = self.delta = 0

    def to_time(self,n_samp) :
        return n_samp/float(self.samp_rate)

    def to_samples(self,duration) :
        if duration == float("inf") :
            return float(duration*self.samp_rate)
        else :
            return int(duration*self.samp_rate)

    def next_state(self) :
        if self.state &lt; len(self.STATES[0])-1 :
            self.state += 1
        else :
            self.state = 0

    def handle_slot(self, slot_pmt):
        with self.lock : 
            if self.state == SLOT_READ :
                if pmt.to_python(slot_pmt) == "STOP" :
                    # self.next_state()
                    self.state = IDLE
                    self.slot_cnt = 0
                    print "[SN "+self.Id+"] SENSOR SLOTS ARE :" + str(self.slots)
                    self.message_port_pub(pmt.to_pmt("busy"), pmt.to_pmt('RESET'))
                else :
                    new_array = pmt.to_python(slot_pmt)

                    # Extract ID coming from slot control block, and remove it from the message
                    self.Id = new_array[0]
                    new_array = new_array[1:]

                    # Extract Slot
                    tab_indices = [i for i, x in enumerate(new_array) if x == "\t"]
                    tmp_slot = new_array[:tab_indices[0]]
                    if tmp_slot.isdigit() :  # FOR DEBUG
                        self.slots.append(int(tmp_slot))     # First character is the slot number to be used
                    else :
                        self.slots.append(int(np.random.choice(range(self.num_slots), 1)))
                    
                    if self.slot_cnt != self.slots[-1] :
                        self.slot_msg = np.append(self.slot_msg,['']*(self.slots[-1]-self.slot_cnt))  # Fill unused slots with empty string
                        self.slot_cnt = self.slots[-1]
                    
                    self.slot_msg = np.append(self.slot_msg,new_array)
                    self.slot_cnt += 1

    def handle_msg(self, msg_pmt):
        with self.lock : 
            if self.state == PKT_GEN :

                self.signal_len = 2*8*((len(self.slot_msg[self.slot_cnt]))+12)    # log2(M)x 8bits x (payload_len + header_len)

                self.msg_out = np.append(self.msg_out,pmt.to_python(pmt.cdr(msg_pmt)))   # Collect message data, convert to Python format:
                self.pdu_cnt += 1
                if self.pdu_cnt == self.signal_len:   # Signal reconstructed 
                    self.pdu_cnt=0
                    # self.msg_out = np.append(self.msg_out,200*[0])
                    self.msg_full = np.array(self.msg_full.tolist() + [self.msg_out.tolist()])    # Store the N signals in N-dim array, analyze carefully before modifying
                    self.msg_out = np.array([])
                    self.state = IDLE    # Return to IDLE and check for remaining messages
                    self.slot_cnt +=1


    def handle_trig(self, trig_pmt):
        with self.lock : 
            if self.state == LISTEN :
                self.trig = pmt.to_python(pmt.cdr(trig_pmt))    # Collect trig message data, convert to Python format
                if self.trig[0] == self.wanted_tag:# and self.trig[1] &gt; 40 : 
                    self.delta = self.nitems_written(0)-self.trig[2]
                    # print self.delta
                    self.state = SYNC
                    
                    self.found = True
                    self.slot_cnt = 0
                    self.msg_out = self.msg_full[self.slot_cnt]     # Init first msg to be sent
                    self.i = 0
                    return 0
                self.trig = 0
                    
                    
    def run_state(self,output) :
        if self.found :

            self.samp_cnt = self.delta-100       
            self.found = False
            # self.state = SYNC
            # self.samp_cnt = 0

        self.samp_cnt += len(output)    # Sample count related to current state
        state_samp = self.to_samples(self.STATES[2][self.state])      
        diff = state_samp - self.samp_cnt       # Act as a timer


            # if self.state == LISTEN :
            #     return 0
            # else :
            #     self
        ###############################################################################    
        ## If the cuurent state cannot run completely, 
        ## i.e the sample count exceeds the number of samples required for the current state
        if diff &lt; 0 :  

              
            output = np.delete(output,slice(len(output)+diff,len(output)))    # Since diff is negative we use +diff

            if self.state == EMIT : 
                if self.slot_cnt in self.slots :
                    if len(output) &gt; len(self.msg_out) :    # In case output buffer is bigger than payload
                        output[:] = np.append(self.msg_out[:len(output)] , [0]*(abs(len(output)-len(self.msg_out))))  # Fill what's left with Sensor Data (if left)
                    else :
                        output[:] = self.msg_out[:len(output)]
                else :
                    output[:] = [0]*len(output)
                self.state = GUARD
            else :    
                if self.state == IDLE :
                    self.msg_out = np.array([])
                    if self.slot_cnt &lt; self.num_slots :
                        if range(self.num_slots)[self.slot_cnt] in self.slots :   # If slot will be used, generate a packet
                            self.message_port_pub(pmt.to_pmt("busy"), pmt.to_pmt('DATA'))    # Request File source to send msg
                            self.state = PKT_GEN
                            # self.next_state()       # Go to PKT_GEN
                        else :      # If slot won't be used, append empty signal
                            self.msg_full = np.array(self.msg_full.tolist() + [[]])    # Store Null signal
                            self.slot_cnt += 1
                        # print "1"
                    else :
                        self.message_port_pub(pmt.to_pmt("busy"), pmt.to_pmt('RESET'))     # Reset reading in 'File source' block
                        self.state = LISTEN         # if all BS slots covered, Jump to LISTEN
                        # print "2"

                elif self.state == SLOT_READ :
                    self.message_port_pub(pmt.to_pmt("busy"), pmt.to_pmt('ARRAY'))

                elif self.state == LISTEN :
                    output[:] = [complex(.5,.5)]*len(output)

                elif self.state == SYNC :
                    self.slot_cnt = 0
                    self.state = EMIT
                    output[:] = [complex(1,1)]*len(output)
                
                elif self.state == GUARD :
                    self.repetition = 0
                    self.slot_cnt += 1
                    if self.slot_cnt &lt; self.num_slots :
                        if self.slot_cnt in self.slots :
                            self.msg_out = self.msg_full[self.slot_cnt]     # Update signal slot index
                        else :
                            self.msg_out = []
                        # self.state -= 2      # Return to EMIT
                        self.state = EMIT
                    else :
                        self.slot_cnt = 0
                        self.message_port_pub(pmt.to_pmt("busy"), pmt.to_pmt('RESET_FRAME')) # Just before the start of PROC
                        self.state = PROC

                elif self.state == PROC :
                    # End of frame --&gt; Reset some variables
                    self.state = SLOT_READ
                    self.msg_full = np.array([])
                    self.msg_out = np.array([])
                    self.slot_msg = np.array([])
                    self.slot_cnt = 0
                    self.slots = []   
                    self.delay_t = 0
                    self.i=0

                elif self.state not in self.STATES[0] :
                    print("STATE ERROR")
                    exit(1)
                
                output[:] = [0]*len(output)


            # if self.state not in (SLOT_READ,IDLE,PKT_GEN,LISTEN) :
            #     self.next_state()

            self.samp_cnt = 0 
        ###############################################################################
        # If current state can run one more time
        else :      
            self.samp_cnt -= len(output)

            if self.state==EMIT :
                if self.slot_cnt in self.slots :
                    if len(self.msg_out) == 0 :
                        output[:] = [0]*len(output)
                    else :    
                        max_output = min(len(output), len(self.msg_out))
                        output = output[:max_output]
                        output[:] = self.msg_out[:max_output]
                        self.msg_out = self.msg_out[max_output:]
                else :
                    output[:] = [0]*len(output)

            elif self.state == LISTEN :
                output[:] = [complex(.5,.5)]*len(output)

            elif self.state == SYNC :
                # self.i = self.samp_cnt + len(output)
                output[:] = [complex(10,10)]*len(output)


            else :
                output[:] = [0]*len(output)

            self.samp_cnt += len(output)
        ###############################################################################

         # Add tags for each state
        if self.state_tag != self.state :

            # print self.STATES[1][self.state]
            self.state_tag = self.state
            offset = self.nitems_written(0)+len(output)
            key = pmt.intern(self.STATES[1][self.state])
            value = pmt.to_pmt(self.slot_cnt)
            self.add_item_tag(0,offset, key, value)


        return len(output)

    def work(self,input_items,output_items):
        with self.lock :

            # if self.state_dbg != self.state :
            #     self.state_dbg = self.state
            #     print "[SN "+self.Id+"] STATE " + self.STATES[1][self.state] + " START"

            retval = self.run_state(output_items[0])
            return retval
</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(704, 1116)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>guard_time</key>
      <value>T_g</value>
    </param>
    <param>
      <key>id</key>
      <value>ephyl_sn_sched</value>
    </param>
    <param>
      <key>length_tag_key</key>
      <value>'packet_len2'</value>
    </param>
    <param>
      <key>num_slots</key>
      <value>len(bs_slots)</value>
    </param>
    <param>
      <key>Proc_time</key>
      <value>T_p</value>
    </param>
    <param>
      <key>samp_rate</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>Slot_time</key>
      <value>T_s</value>
    </param>
    <param>
      <key>Sync_time</key>
      <value>T_sync</value>
    </param>
    <param>
      <key>wanted_tag</key>
      <value>'corr_est'</value>
    </param>
  </block>
  <block>
    <key>fft_vxx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>fft_size</key>
      <value>M</value>
    </param>
    <param>
      <key>forward</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(752, 720)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>fft_vxx_0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>nthreads</key>
      <value>1</value>
    </param>
    <param>
      <key>shift</key>
      <value>True</value>
    </param>
    <param>
      <key>window</key>
      <value></value>
    </param>
  </block>
  <block>
    <key>fft_vxx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>fft_size</key>
      <value>M</value>
    </param>
    <param>
      <key>forward</key>
      <value>False</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(992, 1456)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>fft_vxx_0_0_0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>nthreads</key>
      <value>1</value>
    </param>
    <param>
      <key>shift</key>
      <value>True</value>
    </param>
    <param>
      <key>window</key>
      <value></value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('Data &amp; Slot Control', 'blk', [('bs_slots', '[1]'), ('Control', 'True')], [('DL', 'message', 1), ('busy', 'message', 1)], [('PER', 'message', 1), ('Data', 'message', 1), ('Array', 'message', 1)], 'Embedded Python Block example', ['bs_slots'])</value>
    </param>
    <param>
      <key>bs_slots</key>
      <value>bs_slots</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required  to have default values!
"""

import numpy as np
import pmt
import time
import random
import threading
from gnuradio import gr, gr_unittest, blocks

import ntpath
from Crypto.Cipher import AES
import base64

import string
import re


class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block
    """Embedded Python Block example"""

    def __init__(self, bs_slots = [1],Control=True):  # only default arguments here
        """arguments to this function show up as parameters in GRC"""
        gr.sync_block.__init__(
            self,
            name='Data &amp; Slot Control',   # will show up in GRC
            in_sig=[],
            out_sig=[]
        )
        
        self.message_port_register_out(pmt.to_pmt("Array"))
        self.message_port_register_out(pmt.to_pmt("Data"))
        self.message_port_register_out(pmt.to_pmt("PER"))


        self.message_port_register_in(pmt.intern("busy"))
        self.set_msg_handler(pmt.intern("busy"), self.handle_busy)
        self.message_port_register_in(pmt.intern("DL"))
        self.set_msg_handler(pmt.intern("DL"), self.handle_DL)        

        self.lock = threading.Lock()
        self.slot_n = -1
        self.data = []
        self.busy = True
        self.lines = []    
        self.i = 0
        self.DL = ''

        self.frame = '0'
        self.control = Control

        self.ID = random.choice(string.ascii_letters)

        self.bs_slots = bs_slots
        self.sn_slots = []

        self.RX = ''
        self.RX_frame = []

        self.dl_en = False

        self.PER = 64*[0]

        self.error_list = []
        self.cnt = 0
        self.error = 0
        self.cnt_dbg = 0

        self.watch = 0

        # Encrypt ID
        # self.enc_ID = self.encrypt(self.ID)
        self.enc_ID = self.ID

        self.tmp_data = self.rand_data(14)      # Created to keep the same data bits
        self.lines = self.gen_rand_pld(self.tmp_data,True,2)        

    def rand_slots(self,len) :
        res = [random.choice(self.bs_slots) for _ in xrange(len)]
        return map(str, res)

    def rand_data(self,len) :
        res = ''
        letters = string.ascii_lowercase
        res =  ''.join(random.choice(letters) for i in xrange(len))
        return res 

    def encrypt(self,mystr) :
        secret_key = '0123456789ABCDEF' # create new &amp; store somewhere safe
        cipher = AES.new(secret_key,AES.MODE_ECB) 
        try :
            msg_text = mystr.rjust(16)
            encoded = base64.b64encode(cipher.encrypt(msg_text))
            return encoded
        except :
            print "Encryption Error, input must be multiple of 16"


    # Generate random payload
    def gen_rand_pld(self,data=False,rand_s=True,n=2,slots=[]) :    
        # with self.lock :        
            res = []
            slots = map(str, slots)
            if not data :
                data = self.rand_data(14)    
            
            if rand_s :  
                slots = self.rand_slots(n)
                for j in xrange(n):
                    res.append(slots[j]+'\t'+data)
            else :
                if any(slots) :
                    for j in range(len(slots)):
                        # Small note here, 
                        # The payload is adapted if the slot number contains more than two digits
                        res.append(slots[j]+'\t'+data[:len(data)-len(slots[j])+1])      
                else :
                    res = '0'+'\t'+data


            # print "#################################"
            # print res
            # print data
            # print slots
            # print "#################################" 
            
            return res 


    # Compare Tx &amp; Rx PLD
    def compare_pld(self,TX,rx) :    
        # with self.lock :        
            v=''
            h = -1
            active_slots = []
            used_slots = []
            new_slots = []
            self.error = 0
            tx = TX
            # rx = rx.tolist()
            # tx = np.array(TX)

            # Verify that rx and tx frames are arrays, to avoid errors when sweeping
            try :
                TX[0][0]
            except :
                tx = [TX]

            try :
                rx[0][0]
            except :
                rx = [rx]

            # try :
            #     np.shape(tx)[1]
            # except :
            #     tx = np.array([tx]) 
            #     tx = tx.tolist()

            try :
                np.shape(rx)[1]
            except :
                rx = np.array([rx])
                # rx = rx.tolist()                

            # print tx
            # print rx
            # print type(tx)

            ############################################################################################
            for f in range(len(rx)) :
                if len(rx[f])&gt;3 and rx[f][1].isdigit() :

                    active_slots = np.append(active_slots,rx[f][1])
                    for j in xrange(len(tx)):
                        tx[j] = re.split(r'\t+', tx[j])
                        used_slots = np.append(used_slots,tx[j][0])
                        # Check for slot activity
                        if rx[f][1] == tx[j][0]:     
                            v += 's'
                            # Check for matching id
                            if rx[f][2] == self.ID:     
                                v += 'i'
                                # Check for matching payload
                                if rx[f][3] == tx[j][1]:     
                                    v += 'p'
                                h = f 
                        # print tx[j]
                        # print rx[f][2] 
                        # print self.ID
                        rx[f][2] == self.ID

                        tx[j] = '\t'.join(tx[j])

            if not (any(active_slots) and any(used_slots))  :
                active_slots = [0]            
            ############################################################################################
            remaining = list(set(map(str, self.bs_slots)) - set(active_slots))
            remaining.sort()

            # With Control Policy 
            if self.control :
                # if v.count('i') &gt; 1 and v.count('p') &gt; 1 :
                if v.count('p') &gt;= 1 :
                    new_slots = rx[h][1]
                    # new_slots = used_slots
                    self.error = 0

                # elif v.count('i') == 1 and v.count('p') == 1 :
                #     # if h == -1 :
                #     #     new_slots = rx[1]
                #     # else :
                #     #     new_slots = rx[h][1]
                #     new_slots = rx[h][1]
                #     # new_slots = used_slots
                #     self.error = 0    

                # elif v.count('s') &gt; 0 and (v.count('i') == 0 or v.count('p') == 0):
                #     new_slots = np.random.choice(remaining, 2).tolist()
                #     self.error = 0

                # elif v.count('s') == 0 :
                #     new_slots = used_slots
                #     self.error = 1

                else :
                    # new_slots = np.random.choice(remaining, 2).tolist()
                    tmp = map(int,used_slots)
                    for i in range(len(tmp)):
                        tmp[i] += 1 
                        if tmp[i] not in self.bs_slots :
                            tmp[i] = 0
                    new_slots = map(str,tmp)
                    self.error = 1
            #################################################################
            # With No Control Policy, simply increment slots each frame
            else :
                # if v.count('i') == 2 or v.count('p') == 2 :
                #     self.error = 0
                if v.count('p') &gt; 0 :
                    if v.count('s') &gt; 0 :
                        self.error = 0
                    else :
                        self.error = 1
                else :
                    self.error = 1
                # new_slots = used_slots
                
                new_slots = np.random.choice(self.bs_slots, 2).tolist()
            ############################################################################################

            used_slots = list(set(used_slots))
            used_slots.sort()
            active_slots = list(set(active_slots))
            active_slots.sort()
            new_slots = list(set(new_slots))
            new_slots.sort()



            return [v,new_slots,active_slots,self.error]


        
    def handle_busy(self, msg_pmt):
        with self.lock :        

            self.busy = pmt.to_python(msg_pmt)

            if self.busy != True :
                if self.i &lt; len(self.lines) :
                    ######################### PROCESS RECEIVED SIGNALS FROM SCHEDULER ######################################
                    # Scheduler informs a reset before sending data
                    if self.busy == 'RESET' :
                        self.i = 0
                        if self.control :
                            print "[SN "+self.ID+"] CONTROLLED\n"

                        # self.dl_en = True 
                    ########################################################################################################
                    # Scheduler informs a frame reset (frame finished)
                    elif self.busy == 'RESET_FRAME' :
                        ##################### PROCESS RECEIVED FRAMES AND COMPUTE PER ##############################
                        # Activity in DL :
                        if any(self.RX_frame) :
                            # Check if valid + if multiple or single received frame
                            if len(self.RX_frame) &gt;= 4 and len(self.RX_frame)%4 == 0 :
                                self.RX_frame = np.reshape(self.RX_frame, (-1, 4))      # Sort received frames by rows


                                # delete overlapping frames = delete array m on axis 0 (array,index,axis)
                                tmp = self.RX_frame
                                for m in range(len(self.RX_frame)) :
                                    if self.RX_frame[m][0] != self.RX[0]:
                                        tmp = np.delete(self.RX_frame, m, 0)    # delete overlapping erroneous frames = delete array m on axis 0 (array,index,axis)  
                                self.RX_frame = tmp

                                result = self.compare_pld(self.lines,self.RX_frame)

                                # Generate new payload (or not, depending on the result)
                                self.lines = self.gen_rand_pld(self.tmp_data,False,2,result[1])
                                
                                # print "[SN "+self.ID+"] Score Of Frame " + self.RX[0] + " : " + str(result[0]) + "\n"
                        ###########################################################################################
                        # No activity in DL --&gt; Increment slots
                        else:
                            self.error = 1
                            if self.control :
                            # In case of keeping same slots
                                tx = self.lines
                                used_slots = []
                                for j in xrange(len(tx)):
                                    tx[j] = re.split(r'\t+', tx[j])
                                    used_slots = np.append(used_slots,tx[j][0])    
                                self.lines = self.gen_rand_pld(self.tmp_data,False,2,used_slots)                             
                            # If not, randomize
                            else :
                                self.lines = self.gen_rand_pld(self.tmp_data,True,2) 

                        ############################################################################################
                        self.RX_frame = [] 
                        self.error_list = np.append(self.error_list,self.error)
                        # print "PER counter = " + str(self.cnt)
                        # Compute self.PER
                        if self.cnt%6==0 and self.cnt !=0 :
                            # Shift PER to the right
                            self.PER = [0] + self.PER[:-1]
                            self.PER[0] = (self.PER[4] + self.PER[3] + self.PER[2] + self.PER[1] + sum(self.error_list)/float(self.cnt))/5
                            # self.PER[0] = sum(self.error_list)/float(self.cnt)
                            per_pdu = pmt.cons(pmt.make_dict(), pmt.init_f32vector(64,self.PER))    
                            self.cnt=0
                            self.error_list = []
                            self.message_port_pub(pmt.to_pmt("PER"), per_pdu) 

                        self.cnt += 1   # Frame counter mod N (where N is averaging size)
                        
                    ########################################################################################################
                    else :
                    # Scheduler requests node ID and payload array to compute IQ signal length
                        if self.busy == 'ARRAY' :
                            # Add ID for scheduler, removed also later by the scheduler
                            tmp = self.ID + self.lines[self.i]
                            self.message_port_pub(pmt.to_pmt("Array"), pmt.to_pmt(tmp))   # Send 1st char of each line (aka slots)
                    ########################################################################################################                            
                    # Scheduler requests payload array to be sent in signal shaping path
                        elif self.busy == 'DATA' :
                            # Data is (node_id + line_i)
                            data = self.enc_ID + '\t' + self.lines[self.i][2:]     # Remove the first char and tabulation
                            OUT = pmt.cons(pmt.make_dict(), pmt.init_u8vector(len(data),[ord(c) for c in data]))    # Data = encrypted node_id + line_i
                            self.message_port_pub(pmt.to_pmt("Data"), OUT) 
                        self.i += 1
                else :
                    self.message_port_pub(pmt.to_pmt("Array"), pmt.to_pmt("STOP"))
                    self.i = 0 

            self.busy = True


    # Here we process all DL data broadcasted by the BS
    def handle_DL(self, msg_pmt):
        with self.lock :        

            self.watch += 1
            self.DL = pmt.to_python(msg_pmt)
            result = [0]
            l = [chr(c) for c in self.DL[1]]
            tab_pos = [pos for pos, char in enumerate(l) if char == '\t']     # \t is the separator
            l = ''.join(l)
            self.RX = re.split(r'\t+', l)

            # Correct a silly bug where a '0' is converted to '\x00', not the optimal correction
            if '\x00' in self.RX[0] :   
                self.RX = ['0'] + [t.replace('\x00', '') for t in self.RX]

            # If received frame is valid &lt;&gt; 4 fields separated with a \t
            if len(self.RX)%4 == 0 :
                self.RX_frame = np.append([self.RX_frame],[self.RX])

            self.DL = '' 
            
            # print self.lines
            # print self.RX




























































# """
# Embedded Python Blocks:

# Each time this file is saved, GRC will instantiate the first class it finds
# to get ports and parameters of your block. The arguments to __init__  will
# be the parameters. All of them are required  to have default values!
# """

# import numpy as np
# import pmt
# import time
# import random
# import threading
# from gnuradio import gr, gr_unittest, blocks

# import ntpath
# from Crypto.Cipher import AES
# import base64

# import string
# import re


# class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block
#     """Embedded Python Block example"""

#     def __init__(self, Sensor_id=random.choice(string.ascii_letters),bs_slots = [1],Control=True):  # only default arguments here
#         """arguments to this function show up as parameters in GRC"""
#         gr.sync_block.__init__(
#             self,
#             name='Data &amp; Slot Control',   # will show up in GRC
#             in_sig=[],
#             out_sig=[]
#         )
        
#         self.message_port_register_out(pmt.to_pmt("Array"))
#         self.message_port_register_out(pmt.to_pmt("Data"))
#         self.message_port_register_out(pmt.to_pmt("PER"))


#         self.message_port_register_in(pmt.intern("busy"))
#         self.set_msg_handler(pmt.intern("busy"), self.handle_busy)
#         self.message_port_register_in(pmt.intern("DL"))
#         self.set_msg_handler(pmt.intern("DL"), self.handle_DL)        

#         self.lock = threading.Lock()
#         self.slot_n = -1
#         self.data = []
#         self.busy = True
#         self.lines = []    
#         self.i = 0
#         self.DL = ''

#         self.frame = '0'
#         self.control = Control

#         self.ID = random.choice(string.ascii_letters)

#         self.bs_slots = bs_slots
#         self.sn_slots = []

#         self.RX = ''
#         self.RX_frame = []

#         self.dl_en = False

#         self.PER = 0

#         # Encrypt ID
#         # self.enc_ID = self.encrypt(self.ID)
#         self.enc_ID = self.ID

#         self.tmp_data = self.rand_data(16)      # Created to keep the same data bits
#         self.lines = self.gen_rand_pld(self.tmp_data,True,2)        

#     def rand_slots(self,len) :
#         res = [random.choice(self.bs_slots) for _ in xrange(len)]
#         # print res  
#         return map(str, res)

#     def rand_data(self,len) :
#         res = ''
#         letters = string.ascii_lowercase
#         res =  ''.join(random.choice(letters) for i in xrange(len))
#         return res 

#     def encrypt(self,mystr) :
#         secret_key = '0123456789ABCDEF' # create new &amp; store somewhere safe
#         cipher = AES.new(secret_key,AES.MODE_ECB) 
#         try :
#             msg_text = mystr.rjust(16)
#             encoded = base64.b64encode(cipher.encrypt(msg_text))
#             return encoded
#         except :
#             print "Encryption Error, input must be multiple of 16"


#     # Generate random payload
#     def gen_rand_pld(self,data=False,rand_s=True,n=2,slots=[]) :    
#         # with self.lock :        
#             res = []
#             slots = map(str, slots)
#             if not data :
#                 data = self.rand_data(16)    
            
#             if rand_s :  
#                 slots = self.rand_slots(n)
#                 for j in xrange(n):
#                     res.append(slots[j]+'\t'+data)
#             else :
#                 if any(slots) :
#                     for j in range(len(slots)):
#                         res.append(slots[j]+'\t'+data)
                        
#                 else :
#                     res = '0'+'\t'+data
#             # print "#################################"
#             # print res
#             # print data
#             # print slots
#             # print "#################################" 

#             return res 


#     # Compare Tx &amp; Rx PLD
#     def compare_pld(self,TX,rx) :    
#         # with self.lock :        
#             v=''
#             h = -1
#             tx = TX
#             active_slots = []
#             used_slots = []
#             error = 1
#             # print "+++++++++++++++++++++++++++++++++"
#             # print tx
#             # print rx
#             # print "+++++++++++++++++++++++++++++++++" 


#             # If RX_frame is multidimentional
#             if isinstance(rx[0], (np.ndarray,list)) :    
#                 for f in range(len(rx)) :
#                     active_slots = np.append(active_slots,rx[f][1])
#                     for j in xrange(len(tx)):
#                         tx[j] = re.split(r'\t+', tx[j])
#                         used_slots = np.append(used_slots,tx[j][0])

#                         # Check for slot activity
#                         if rx[f][1] == tx[j][0]:     
#                             v += 's'
#                             # Check for matching id
#                             if rx[f][2] == self.ID:     
#                                 v += 'i'
#                                 # Check for matching payload
#                                 if rx[f][3] == tx[j][1]:     
#                                     v += 'p'
#                                 h = f 
#                         tx[j] = '\t'.join(tx[j])

#             # If RX_frame is a 1D array
#             else :
#                 active_slots = np.append(active_slots,rx[1])
#                 for j in xrange(len(tx)):
#                     tx[j] = re.split(r'\t+', tx[j])
#                     used_slots = np.append(used_slots,tx[j][0])

#                     # Check for slot activity
#                     if rx[1] == tx[j][0]:     
#                         v += 's'
#                         # Check for matching id
#                         if rx[2] == self.ID:     
#                             v += 'i'
#                             # Check for matching payload
#                             if rx[3] == tx[j][1]:     
#                                 v += 'p'

#             remaining = list(set(map(str, self.bs_slots)) - set(active_slots))
#             remaining.sort()

#             # With Control Policy 

#             if self.control == True :
#                 if v.count('i') == 2 or v.count('p') == 2 :
#                     new_slots = rx[h][1]
#                     error = 0

#                 elif v.count('i') == 1 or v.count('p') == 1 :
#                     if h == -1 :
#                         new_slots = rx[1]
#                     else :
#                         new_slots = rx[h][1]
#                     error = 0    

#                 elif v.count('s') == 0 :
#                     new_slots = used_slots
#                     error = 1

#                 else :
#                     new_slots = np.random.choice(remaining, 2).tolist()
#                     error = 1

#             # With No Control Policy 
#             else :
#                 new_slots = np.random.choice(remaining, 2).tolist()
#                 if v.count('i') == 2 or v.count('p') == 2 :
#                     error = 0
#                 elif v.count('i') == 1 or v.count('p') == 1 :
#                     error = 0    
#                 elif v.count('s') == 0 :
#                     error = 1
#                 else :
#                     error = 1


#             used_slots = list(set(used_slots))
#             used_slots.sort()
#             active_slots = list(set(active_slots))
#             active_slots.sort()
#             new_slots = list(set(new_slots))
#             new_slots.sort()





#             return [v,new_slots,active_slots,error]




#             # Another silly bug which, in my opinion, due to the asynchronous nature of the state machines
#             # What happens is that "new_slot" 
#             # Nevermind

#             # print "#################################"
#             # # print used_slots
#             # # print active_slots
#             # # print remaining
#             # print new_slots
#             # print "#################################" 




        
#     def handle_busy(self, msg_pmt):
#         with self.lock :        

#             self.busy = pmt.to_python(msg_pmt)

#             if self.busy != True :
#                 if self.i &lt; len(self.lines) :
#                     if self.busy == 'RESET' :
#                         self.i = 0

#                     elif self.busy == 'RESET_FRAME' :
#                         # if self.dl_en == True :  

#                         # Check if RX_frame is non empty
#                         if len(self.RX_frame)&gt;0 : 

#                             if len(self.RX_frame) &gt; 4 and len(self.RX_frame)%4 == 0 :
#                                 # for r in len(self.RX_frame)/4 :
#                                 self.RX_frame = np.reshape(self.RX_frame, (-1, 4))
#                                 tmp = self.RX_frame
#                                 for m in range(len(self.RX_frame)) :
#                                     if self.RX_frame[m][0] != self.RX[0]:
#                                         tmp = np.delete(self.RX_frame, m, 0)    # delete array m on axis 0 (array,index,axis)  
#                                 self.RX_frame = tmp

                            

                            
#                             # print "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
#                             # print self.RX_frame
#                             # print self.RX
#                             # print "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
                            
#                             result = self.compare_pld(self.lines,self.RX_frame)

#                             if float(self.RX[0])!=0 :
#                                 # Compute PER
#                                 self.PER = (self.PER+result[3])/float(self.RX[0])
#                                 # Broadcast PER Message/Signal
#                                 per_pdu = pmt.cons(pmt.make_dict(), pmt.init_f32vector(8,8*[self.PER]))    
#                                 self.message_port_pub(pmt.to_pmt("PER"), per_pdu) 
#                                 # print self.PER

#                             # Generate new payload (or not, depending on the result)
#                             self.lines = self.gen_rand_pld(self.tmp_data,False,2,result[1])
                            
#                             # print "[SN "+self.ID+"] Score Of Frame " + self.RX[0] + " : " + str(result[0]) + "\n"

#                             self.RX_frame = [] 

#                         # else :

#                     else :
#                         if self.busy == 'ARRAY' :
#                             self.message_port_pub(pmt.to_pmt("Array"), pmt.to_pmt(self.lines[self.i]))   # Send 1st char of each line (aka slots)
#                         elif self.busy == 'DATA' :
#                             # Data = encrypted node_id + line_i
#                             data = self.enc_ID + '\t' + self.lines[self.i][2:]     # Remove the first char and tabulation
#                             # print data
#                             OUT = pmt.cons(pmt.make_dict(), pmt.init_u8vector(len(data),[ord(c) for c in data]))    # Data = encrypted node_id + line_i
#                             self.message_port_pub(pmt.to_pmt("Data"), OUT) 
#                         self.i += 1
#                 else :
#                     self.message_port_pub(pmt.to_pmt("Array"), pmt.to_pmt("STOP"))
#                     self.i = 0 

#             self.busy = True


#     # Here we process all DL data broadcasted by the BS
#     def handle_DL(self, msg_pmt):
#         with self.lock :        

#             self.DL = pmt.to_python(msg_pmt)

#             result = [0]
#             l = [chr(c) for c in self.DL[1]]
#             tab_pos = [pos for pos, char in enumerate(l) if char == '\t']     # \t is the separator
#             l = ''.join(l)
#             self.RX = re.split(r'\t+', l)

#             # Correct a silly bug where a '0' is converted to '\x00', not the optimal solution
#             if '\x00' in self.RX[0] :   
#                 self.RX = ['0'] + [t.replace('\x00', '') for t in self.RX]

            
#             self.RX_frame = np.append([self.RX_frame],[self.RX])
#             # print self.RX_frame
#             # if self.dl_en == True :  
#             #     # Check if RX_frame is non empty
#             #     if len(self.RX_frame)&gt;0 : 

#             #         if len(self.RX_frame) &gt; 4 and len(self.RX_frame)%4 == 0 :
#             #             # for r in len(self.RX_frame)/4 :
#             #             self.RX_frame = np.reshape(self.RX_frame, (-1, 4))
#             #             for m in range(len(self.RX_frame)) :
#             #                 if self.RX_frame[m][0] != self.RX[0]:
#             #                     tmp = np.delete(self.RX_frame, m, 0)    # delete array m on axis 0 (array,index,axis)  
#             #             self.RX_frame = tmp

                    

                    
#             #         # print "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
#             #         # print self.RX_frame
#             #         # print self.RX
#             #         # print "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
                    
#             #         result = self.compare_pld(self.lines,self.RX_frame)

#             #         # Compute PER
#             #         self.PER = (self.PER+result[3])/float(self.RX[0])
#             #         # Broadcast PER Message/Signal
#             #         per_pdu = pmt.cons(pmt.make_dict(), pmt.init_f32vector(8,8*[self.PER]))    
#             #         self.message_port_pub(pmt.to_pmt("PER"), per_pdu) 
#             #         print self.PER

#             #         # Generate new payload (or not, depending on the result)
#             #         self.lines = self.gen_rand_pld(self.tmp_data,False,2,result[1])
                    
#             #         # print "[SN "+self.ID+"] Score Of Frame " + self.RX[0] + " : " + str(result[0]) + "\n"

#             #         self.RX_frame = [] 

            
#             #     self.dl_en = False




#      </value>
    </param>
    <param>
      <key>comment</key>
      <value>Control:
False : Random access
True : Simple control access
  --&gt; If success; keep slot; else; increment slot</value>
    </param>
    <param>
      <key>Control</key>
      <value>control</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(208, 1816)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>file_source_slot_ctrl</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1192, 1716)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>hdr_format</value>
    </param>
    <param>
      <key>label</key>
      <value>Header Formatter</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>digital.header_format_default(digital.packet_utils.default_access_code, 0)</value>
    </param>
  </block>
  <block>
    <key>import</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(0, 156)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>import_0</value>
    </param>
    <param>
      <key>import</key>
      <value>import math, sys, numpy as np, random, string</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(650, 16)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>modulation</value>
    </param>
    <param>
      <key>label</key>
      <value></value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>4</value>
    </param>
  </block>
  <block>
    <key>qtgui_time_sink_x</key>
    <param>
      <key>autoscale</key>
      <value>False</value>
    </param>
    <param>
      <key>axislabels</key>
      <value>True</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>ctrlpanel</key>
      <value>False</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>entags</key>
      <value>False</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(656, 1720)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>grid</key>
      <value>True</value>
    </param>
    <param>
      <key>id</key>
      <value>qtgui_time_sink_x_0</value>
    </param>
    <param>
      <key>legend</key>
      <value>True</value>
    </param>
    <param>
      <key>alpha1</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color1</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label1</key>
      <value></value>
    </param>
    <param>
      <key>marker1</key>
      <value>-1</value>
    </param>
    <param>
      <key>style1</key>
      <value>1</value>
    </param>
    <param>
      <key>width1</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha10</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color10</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label10</key>
      <value></value>
    </param>
    <param>
      <key>marker10</key>
      <value>-1</value>
    </param>
    <param>
      <key>style10</key>
      <value>1</value>
    </param>
    <param>
      <key>width10</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha2</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color2</key>
      <value>"red"</value>
    </param>
    <param>
      <key>label2</key>
      <value></value>
    </param>
    <param>
      <key>marker2</key>
      <value>-1</value>
    </param>
    <param>
      <key>style2</key>
      <value>1</value>
    </param>
    <param>
      <key>width2</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha3</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color3</key>
      <value>"green"</value>
    </param>
    <param>
      <key>label3</key>
      <value></value>
    </param>
    <param>
      <key>marker3</key>
      <value>-1</value>
    </param>
    <param>
      <key>style3</key>
      <value>1</value>
    </param>
    <param>
      <key>width3</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha4</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color4</key>
      <value>"black"</value>
    </param>
    <param>
      <key>label4</key>
      <value></value>
    </param>
    <param>
      <key>marker4</key>
      <value>-1</value>
    </param>
    <param>
      <key>style4</key>
      <value>1</value>
    </param>
    <param>
      <key>width4</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha5</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color5</key>
      <value>"cyan"</value>
    </param>
    <param>
      <key>label5</key>
      <value></value>
    </param>
    <param>
      <key>marker5</key>
      <value>-1</value>
    </param>
    <param>
      <key>style5</key>
      <value>1</value>
    </param>
    <param>
      <key>width5</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha6</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color6</key>
      <value>"magenta"</value>
    </param>
    <param>
      <key>label6</key>
      <value></value>
    </param>
    <param>
      <key>marker6</key>
      <value>-1</value>
    </param>
    <param>
      <key>style6</key>
      <value>1</value>
    </param>
    <param>
      <key>width6</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha7</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color7</key>
      <value>"yellow"</value>
    </param>
    <param>
      <key>label7</key>
      <value></value>
    </param>
    <param>
      <key>marker7</key>
      <value>-1</value>
    </param>
    <param>
      <key>style7</key>
      <value>1</value>
    </param>
    <param>
      <key>width7</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha8</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color8</key>
      <value>"dark red"</value>
    </param>
    <param>
      <key>label8</key>
      <value></value>
    </param>
    <param>
      <key>marker8</key>
      <value>-1</value>
    </param>
    <param>
      <key>style8</key>
      <value>1</value>
    </param>
    <param>
      <key>width8</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha9</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color9</key>
      <value>"dark green"</value>
    </param>
    <param>
      <key>label9</key>
      <value></value>
    </param>
    <param>
      <key>marker9</key>
      <value>-1</value>
    </param>
    <param>
      <key>style9</key>
      <value>1</value>
    </param>
    <param>
      <key>width9</key>
      <value>1</value>
    </param>
    <param>
      <key>name</key>
      <value>Packet Error rate</value>
    </param>
    <param>
      <key>nconnections</key>
      <value>1</value>
    </param>
    <param>
      <key>size</key>
      <value>64</value>
    </param>
    <param>
      <key>srate</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>tr_chan</key>
      <value>0</value>
    </param>
    <param>
      <key>tr_delay</key>
      <value>0</value>
    </param>
    <param>
      <key>tr_level</key>
      <value>0.0</value>
    </param>
    <param>
      <key>tr_mode</key>
      <value>qtgui.TRIG_MODE_FREE</value>
    </param>
    <param>
      <key>tr_slope</key>
      <value>qtgui.TRIG_SLOPE_POS</value>
    </param>
    <param>
      <key>tr_tag</key>
      <value>""</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>update_time</key>
      <value>0.10</value>
    </param>
    <param>
      <key>ylabel</key>
      <value>PER</value>
    </param>
    <param>
      <key>yunit</key>
      <value>""</value>
    </param>
    <param>
      <key>ymax</key>
      <value>1</value>
    </param>
    <param>
      <key>ymin</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>qtgui_time_sink_x</key>
    <param>
      <key>autoscale</key>
      <value>False</value>
    </param>
    <param>
      <key>axislabels</key>
      <value>True</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>ctrlpanel</key>
      <value>False</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>entags</key>
      <value>True</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1576, 512)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>grid</key>
      <value>True</value>
    </param>
    <param>
      <key>id</key>
      <value>qtgui_time_sink_x_0_0_0_1_0_0_0_0_0_0_0_0</value>
    </param>
    <param>
      <key>legend</key>
      <value>True</value>
    </param>
    <param>
      <key>alpha1</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color1</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label1</key>
      <value>res</value>
    </param>
    <param>
      <key>marker1</key>
      <value>-1</value>
    </param>
    <param>
      <key>style1</key>
      <value>1</value>
    </param>
    <param>
      <key>width1</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha10</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color10</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label10</key>
      <value></value>
    </param>
    <param>
      <key>marker10</key>
      <value>-1</value>
    </param>
    <param>
      <key>style10</key>
      <value>1</value>
    </param>
    <param>
      <key>width10</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha2</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color2</key>
      <value>"red"</value>
    </param>
    <param>
      <key>label2</key>
      <value>ref</value>
    </param>
    <param>
      <key>marker2</key>
      <value>-1</value>
    </param>
    <param>
      <key>style2</key>
      <value>1</value>
    </param>
    <param>
      <key>width2</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha3</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color3</key>
      <value>"green"</value>
    </param>
    <param>
      <key>label3</key>
      <value></value>
    </param>
    <param>
      <key>marker3</key>
      <value>-1</value>
    </param>
    <param>
      <key>style3</key>
      <value>1</value>
    </param>
    <param>
      <key>width3</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha4</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color4</key>
      <value>"black"</value>
    </param>
    <param>
      <key>label4</key>
      <value></value>
    </param>
    <param>
      <key>marker4</key>
      <value>-1</value>
    </param>
    <param>
      <key>style4</key>
      <value>1</value>
    </param>
    <param>
      <key>width4</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha5</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color5</key>
      <value>"cyan"</value>
    </param>
    <param>
      <key>label5</key>
      <value></value>
    </param>
    <param>
      <key>marker5</key>
      <value>-1</value>
    </param>
    <param>
      <key>style5</key>
      <value>1</value>
    </param>
    <param>
      <key>width5</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha6</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color6</key>
      <value>"magenta"</value>
    </param>
    <param>
      <key>label6</key>
      <value></value>
    </param>
    <param>
      <key>marker6</key>
      <value>-1</value>
    </param>
    <param>
      <key>style6</key>
      <value>1</value>
    </param>
    <param>
      <key>width6</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha7</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color7</key>
      <value>"yellow"</value>
    </param>
    <param>
      <key>label7</key>
      <value></value>
    </param>
    <param>
      <key>marker7</key>
      <value>-1</value>
    </param>
    <param>
      <key>style7</key>
      <value>1</value>
    </param>
    <param>
      <key>width7</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha8</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color8</key>
      <value>"dark red"</value>
    </param>
    <param>
      <key>label8</key>
      <value></value>
    </param>
    <param>
      <key>marker8</key>
      <value>-1</value>
    </param>
    <param>
      <key>style8</key>
      <value>1</value>
    </param>
    <param>
      <key>width8</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha9</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color9</key>
      <value>"dark green"</value>
    </param>
    <param>
      <key>label9</key>
      <value></value>
    </param>
    <param>
      <key>marker9</key>
      <value>-1</value>
    </param>
    <param>
      <key>style9</key>
      <value>1</value>
    </param>
    <param>
      <key>width9</key>
      <value>1</value>
    </param>
    <param>
      <key>name</key>
      <value>BS</value>
    </param>
    <param>
      <key>nconnections</key>
      <value>1</value>
    </param>
    <param>
      <key>size</key>
      <value>int(samp_rate*frame_len)/80</value>
    </param>
    <param>
      <key>srate</key>
      <value>samp_rate/80</value>
    </param>
    <param>
      <key>tr_chan</key>
      <value>0</value>
    </param>
    <param>
      <key>tr_delay</key>
      <value>0</value>
    </param>
    <param>
      <key>tr_level</key>
      <value>0.3</value>
    </param>
    <param>
      <key>tr_mode</key>
      <value>qtgui.TRIG_MODE_TAG</value>
    </param>
    <param>
      <key>tr_slope</key>
      <value>qtgui.TRIG_SLOPE_POS</value>
    </param>
    <param>
      <key>tr_tag</key>
      <value>BCH</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>update_time</key>
      <value>0.10</value>
    </param>
    <param>
      <key>ylabel</key>
      <value>Amplitude</value>
    </param>
    <param>
      <key>yunit</key>
      <value>""</value>
    </param>
    <param>
      <key>ymax</key>
      <value>40</value>
    </param>
    <param>
      <key>ymin</key>
      <value>-40</value>
    </param>
  </block>
  <block>
    <key>qtgui_time_sink_x</key>
    <param>
      <key>autoscale</key>
      <value>False</value>
    </param>
    <param>
      <key>axislabels</key>
      <value>True</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>ctrlpanel</key>
      <value>False</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>entags</key>
      <value>True</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1736, 936)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>grid</key>
      <value>True</value>
    </param>
    <param>
      <key>id</key>
      <value>qtgui_time_sink_x_0_0_0_1_0_0_0_0_0_0_0_0_0</value>
    </param>
    <param>
      <key>legend</key>
      <value>True</value>
    </param>
    <param>
      <key>alpha1</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color1</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label1</key>
      <value>res</value>
    </param>
    <param>
      <key>marker1</key>
      <value>-1</value>
    </param>
    <param>
      <key>style1</key>
      <value>1</value>
    </param>
    <param>
      <key>width1</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha10</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color10</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label10</key>
      <value></value>
    </param>
    <param>
      <key>marker10</key>
      <value>-1</value>
    </param>
    <param>
      <key>style10</key>
      <value>1</value>
    </param>
    <param>
      <key>width10</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha2</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color2</key>
      <value>"red"</value>
    </param>
    <param>
      <key>label2</key>
      <value>ref</value>
    </param>
    <param>
      <key>marker2</key>
      <value>-1</value>
    </param>
    <param>
      <key>style2</key>
      <value>1</value>
    </param>
    <param>
      <key>width2</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha3</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color3</key>
      <value>"green"</value>
    </param>
    <param>
      <key>label3</key>
      <value></value>
    </param>
    <param>
      <key>marker3</key>
      <value>-1</value>
    </param>
    <param>
      <key>style3</key>
      <value>1</value>
    </param>
    <param>
      <key>width3</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha4</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color4</key>
      <value>"black"</value>
    </param>
    <param>
      <key>label4</key>
      <value></value>
    </param>
    <param>
      <key>marker4</key>
      <value>-1</value>
    </param>
    <param>
      <key>style4</key>
      <value>1</value>
    </param>
    <param>
      <key>width4</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha5</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color5</key>
      <value>"cyan"</value>
    </param>
    <param>
      <key>label5</key>
      <value></value>
    </param>
    <param>
      <key>marker5</key>
      <value>-1</value>
    </param>
    <param>
      <key>style5</key>
      <value>1</value>
    </param>
    <param>
      <key>width5</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha6</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color6</key>
      <value>"magenta"</value>
    </param>
    <param>
      <key>label6</key>
      <value></value>
    </param>
    <param>
      <key>marker6</key>
      <value>-1</value>
    </param>
    <param>
      <key>style6</key>
      <value>1</value>
    </param>
    <param>
      <key>width6</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha7</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color7</key>
      <value>"yellow"</value>
    </param>
    <param>
      <key>label7</key>
      <value></value>
    </param>
    <param>
      <key>marker7</key>
      <value>-1</value>
    </param>
    <param>
      <key>style7</key>
      <value>1</value>
    </param>
    <param>
      <key>width7</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha8</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color8</key>
      <value>"dark red"</value>
    </param>
    <param>
      <key>label8</key>
      <value></value>
    </param>
    <param>
      <key>marker8</key>
      <value>-1</value>
    </param>
    <param>
      <key>style8</key>
      <value>1</value>
    </param>
    <param>
      <key>width8</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha9</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color9</key>
      <value>"dark green"</value>
    </param>
    <param>
      <key>label9</key>
      <value></value>
    </param>
    <param>
      <key>marker9</key>
      <value>-1</value>
    </param>
    <param>
      <key>style9</key>
      <value>1</value>
    </param>
    <param>
      <key>width9</key>
      <value>1</value>
    </param>
    <param>
      <key>name</key>
      <value>SN</value>
    </param>
    <param>
      <key>nconnections</key>
      <value>2</value>
    </param>
    <param>
      <key>size</key>
      <value>int(samp_rate*frame_len)</value>
    </param>
    <param>
      <key>srate</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>tr_chan</key>
      <value>1</value>
    </param>
    <param>
      <key>tr_delay</key>
      <value>0</value>
    </param>
    <param>
      <key>tr_level</key>
      <value>3</value>
    </param>
    <param>
      <key>tr_mode</key>
      <value>qtgui.TRIG_MODE_TAG</value>
    </param>
    <param>
      <key>tr_slope</key>
      <value>qtgui.TRIG_SLOPE_POS</value>
    </param>
    <param>
      <key>tr_tag</key>
      <value>SYNC</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>update_time</key>
      <value>0.10</value>
    </param>
    <param>
      <key>ylabel</key>
      <value>Amplitude</value>
    </param>
    <param>
      <key>yunit</key>
      <value>""</value>
    </param>
    <param>
      <key>ymax</key>
      <value>3</value>
    </param>
    <param>
      <key>ymin</key>
      <value>-3</value>
    </param>
  </block>
  <block>
    <key>qtgui_time_sink_x</key>
    <param>
      <key>autoscale</key>
      <value>True</value>
    </param>
    <param>
      <key>axislabels</key>
      <value>True</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>ctrlpanel</key>
      <value>False</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>entags</key>
      <value>True</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1808, 1564)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>grid</key>
      <value>True</value>
    </param>
    <param>
      <key>id</key>
      <value>qtgui_time_sink_x_1</value>
    </param>
    <param>
      <key>legend</key>
      <value>True</value>
    </param>
    <param>
      <key>alpha1</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color1</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label1</key>
      <value></value>
    </param>
    <param>
      <key>marker1</key>
      <value>-1</value>
    </param>
    <param>
      <key>style1</key>
      <value>1</value>
    </param>
    <param>
      <key>width1</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha10</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color10</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label10</key>
      <value></value>
    </param>
    <param>
      <key>marker10</key>
      <value>-1</value>
    </param>
    <param>
      <key>style10</key>
      <value>1</value>
    </param>
    <param>
      <key>width10</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha2</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color2</key>
      <value>"red"</value>
    </param>
    <param>
      <key>label2</key>
      <value></value>
    </param>
    <param>
      <key>marker2</key>
      <value>-1</value>
    </param>
    <param>
      <key>style2</key>
      <value>1</value>
    </param>
    <param>
      <key>width2</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha3</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color3</key>
      <value>"green"</value>
    </param>
    <param>
      <key>label3</key>
      <value></value>
    </param>
    <param>
      <key>marker3</key>
      <value>-1</value>
    </param>
    <param>
      <key>style3</key>
      <value>1</value>
    </param>
    <param>
      <key>width3</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha4</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color4</key>
      <value>"black"</value>
    </param>
    <param>
      <key>label4</key>
      <value></value>
    </param>
    <param>
      <key>marker4</key>
      <value>-1</value>
    </param>
    <param>
      <key>style4</key>
      <value>1</value>
    </param>
    <param>
      <key>width4</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha5</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color5</key>
      <value>"cyan"</value>
    </param>
    <param>
      <key>label5</key>
      <value></value>
    </param>
    <param>
      <key>marker5</key>
      <value>-1</value>
    </param>
    <param>
      <key>style5</key>
      <value>1</value>
    </param>
    <param>
      <key>width5</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha6</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color6</key>
      <value>"magenta"</value>
    </param>
    <param>
      <key>label6</key>
      <value></value>
    </param>
    <param>
      <key>marker6</key>
      <value>-1</value>
    </param>
    <param>
      <key>style6</key>
      <value>1</value>
    </param>
    <param>
      <key>width6</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha7</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color7</key>
      <value>"yellow"</value>
    </param>
    <param>
      <key>label7</key>
      <value></value>
    </param>
    <param>
      <key>marker7</key>
      <value>-1</value>
    </param>
    <param>
      <key>style7</key>
      <value>1</value>
    </param>
    <param>
      <key>width7</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha8</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color8</key>
      <value>"dark red"</value>
    </param>
    <param>
      <key>label8</key>
      <value></value>
    </param>
    <param>
      <key>marker8</key>
      <value>-1</value>
    </param>
    <param>
      <key>style8</key>
      <value>1</value>
    </param>
    <param>
      <key>width8</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha9</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color9</key>
      <value>"dark green"</value>
    </param>
    <param>
      <key>label9</key>
      <value></value>
    </param>
    <param>
      <key>marker9</key>
      <value>-1</value>
    </param>
    <param>
      <key>style9</key>
      <value>1</value>
    </param>
    <param>
      <key>width9</key>
      <value>1</value>
    </param>
    <param>
      <key>name</key>
      <value>""</value>
    </param>
    <param>
      <key>nconnections</key>
      <value>1</value>
    </param>
    <param>
      <key>size</key>
      <value>32</value>
    </param>
    <param>
      <key>srate</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>tr_chan</key>
      <value>0</value>
    </param>
    <param>
      <key>tr_delay</key>
      <value>0</value>
    </param>
    <param>
      <key>tr_level</key>
      <value>0.0</value>
    </param>
    <param>
      <key>tr_mode</key>
      <value>qtgui.TRIG_MODE_FREE</value>
    </param>
    <param>
      <key>tr_slope</key>
      <value>qtgui.TRIG_SLOPE_POS</value>
    </param>
    <param>
      <key>tr_tag</key>
      <value>""</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>update_time</key>
      <value>0.10</value>
    </param>
    <param>
      <key>ylabel</key>
      <value>Amplitude</value>
    </param>
    <param>
      <key>yunit</key>
      <value>""</value>
    </param>
    <param>
      <key>ymax</key>
      <value>1</value>
    </param>
    <param>
      <key>ymin</key>
      <value>-1</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('Slot tag to Message', 'blk', [('wanted_tag', "'corr_start'")], [('0', 'byte', 1)], [('slot_msg', 'message', 1)], 'Embedded Python Block example', ['wanted_tag'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required  to have default values!
"""

import numpy as np
import pmt
import time
import random
from gnuradio import gr, gr_unittest, blocks


class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block
    """Embedded Python Block example"""

    def __init__(self,wanted_tag="corr_start"):  # only default arguments here
        """arguments to this function show up as parameters in GRC"""
        gr.sync_block.__init__(
            self,
            name='Slot tag to Message',   # will show up in GRC
            in_sig=[np.uint8],
            out_sig=[]
        )
        self.wanted_tag = wanted_tag
        self.message_port_register_out(pmt.to_pmt("slot_msg"))        

    def work(self, input_items, output_items):

        num_input_items = len(input_items[0])
        nread = self.nitems_read(0)
        tags = self.get_tags_in_range(0, nread, nread+num_input_items)

        for tag in tags:
            msg = pmt.cons(tag.key,tag.value)
            msg_tup = pmt.to_python(msg)
            if msg_tup[0] == self.wanted_tag :
                # print msg
                slot_msg = pmt.cons(pmt.make_dict(), msg)
                self.message_port_pub(pmt.to_pmt("slot_msg"), slot_msg)
                break

        return num_input_items</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(208, 316)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>tag2msg</value>
    </param>
    <param>
      <key>wanted_tag</key>
      <value>'PUSCH'</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('Slot tag to Message', 'blk', [('wanted_tag', "'corr_start'")], [('0', 'byte', 1)], [('slot_msg', 'message', 1)], 'Embedded Python Block example', ['wanted_tag'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required  to have default values!
"""

import numpy as np
import pmt
import time
import random
from gnuradio import gr, gr_unittest, blocks


class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block
    """Embedded Python Block example"""

    def __init__(self,wanted_tag="corr_start"):  # only default arguments here
        """arguments to this function show up as parameters in GRC"""
        gr.sync_block.__init__(
            self,
            name='Slot tag to Message',   # will show up in GRC
            in_sig=[np.uint8],
            out_sig=[]
        )
        self.wanted_tag = wanted_tag
        self.message_port_register_out(pmt.to_pmt("slot_msg"))        

    def work(self, input_items, output_items):

        num_input_items = len(input_items[0])
        nread = self.nitems_read(0)
        tags = self.get_tags_in_range(0, nread, nread+num_input_items)

        for tag in tags:
            msg = pmt.cons(tag.key,tag.value)
            msg_tup = pmt.to_python(msg)
            if msg_tup[0] == self.wanted_tag :
                # print msg
                slot_msg = pmt.cons(pmt.make_dict(), msg)
                self.message_port_pub(pmt.to_pmt("slot_msg"), slot_msg)
                break

        return num_input_items</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(208, 260)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>tag2msg_0</value>
    </param>
    <param>
      <key>wanted_tag</key>
      <value>'FRAME'</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('Tag detection to Message', 'blk', [('wanted_tag', "'corr_start'")], [('0', 'float', 1)], [('bcn_trig', 'message', 1)], 'Embedded Python Block example', ['wanted_tag'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required  to have default values!
"""

import numpy as np
import pmt
import time
import random
from gnuradio import gr, gr_unittest, blocks


class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block
    """Embedded Python Block example"""

    def __init__(self,wanted_tag="corr_start"):  # only default arguments here
        """arguments to this function show up as parameters in GRC"""
        gr.sync_block.__init__(
            self,
            name='Tag detection to Message',   # will show up in GRC
            in_sig=[np.float32],
            out_sig=[]
        )
        self.wanted_tag = wanted_tag
        self.message_port_register_out(pmt.to_pmt("bcn_trig"))        

    def work(self, input_items, output_items):

        num_input_items = len(input_items[0])
        tag_detected = False
        nread = self.nitems_read(0)
        tags = self.get_tags_in_range(0, nread, nread+num_input_items)

        for tag in tags:
            # msg = pmt.cons(tag.key,tag.value)
            # msg_tup = pmt.to_python(msg)

            # print pmt.to_python(tag.key)
            # print pmt.to_python(tag.value)
            # print nread
            # # print num_input_items
            # print tag.offset

            # msg = [pmt.to_python(tag.key),pmt.to_python(tag.value),tag.offset-nread,input_items[0][tag.offset-nread].tolist()]
            msg = [pmt.to_python(tag.key),pmt.to_python(tag.value),tag.offset]
            msg_tup = msg

            if msg_tup[0] == self.wanted_tag :
                # print msg
                # print tag.offset-nread
                tag_detected = True
                trig_msg = pmt.cons(pmt.make_dict(), pmt.to_pmt(msg))
                self.message_port_pub(pmt.to_pmt("bcn_trig"), trig_msg)
                break

        return num_input_items</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(456, 1108)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>tag2msg_sn</value>
    </param>
    <param>
      <key>wanted_tag</key>
      <value>'corr_est'</value>
    </param>
  </block>
  <block>
    <key>virtual_sink</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(696, 1924)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_sink_0</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>ref</value>
    </param>
  </block>
  <block>
    <key>virtual_sink</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(952, 364)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_sink_0_0</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>res</value>
    </param>
  </block>
  <block>
    <key>virtual_sink</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1800, 1916)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_sink_0_1</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>packet_tx</value>
    </param>
  </block>
  <block>
    <key>virtual_sink</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1448, 1484)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_sink_0_1_0</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>iq_tx</value>
    </param>
  </block>
  <block>
    <key>virtual_sink</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(952, 1236)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_sink_0_1_0_0</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>busy</value>
    </param>
  </block>
  <block>
    <key>virtual_sink</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(472, 1900)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_sink_0_1_0_0_0</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>array</value>
    </param>
  </block>
  <block>
    <key>virtual_sink</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1416, 308)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_sink_0_1_0_0_0_0</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>DL</value>
    </param>
  </block>
  <block>
    <key>virtual_sink</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1784, 1188)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_sink_0_1_0_0_1</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>ch</value>
    </param>
  </block>
  <block>
    <key>virtual_sink</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(2064, 748)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_sink_0_1_1</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>packet_rx</value>
    </param>
  </block>
  <block>
    <key>virtual_sink</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(848, 916)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_sink_0_1_1_0</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>bcn</value>
    </param>
  </block>
  <block>
    <key>virtual_source</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1408, 1580)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_source_0</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>ref</value>
    </param>
  </block>
  <block>
    <key>virtual_source</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(16, 1844)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_source_1_2_0</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>busy</value>
    </param>
  </block>
  <block>
    <key>virtual_source</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(8, 1484)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_source_1_2_0_0</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>packet_tx</value>
    </param>
  </block>
  <block>
    <key>virtual_source</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(16, 1316)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_source_1_2_0_1</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>iq_tx</value>
    </param>
  </block>
  <block>
    <key>virtual_source</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(472, 1172)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_source_1_2_0_2</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>array</value>
    </param>
  </block>
  <block>
    <key>virtual_source</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(16, 764)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_source_1_2_0_2_0</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>ch</value>
    </param>
  </block>
  <block>
    <key>virtual_source</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(16, 420)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_source_1_2_0_2_1</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>packet_rx</value>
    </param>
  </block>
  <block>
    <key>virtual_source</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(32, 1188)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_source_1_2_0_2_2</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>bcn</value>
    </param>
  </block>
  <block>
    <key>virtual_source</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(16, 1748)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>virtual_source_1_2_0_3</value>
    </param>
    <param>
      <key>stream_id</key>
      <value>DL</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(1064, 4)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>zc</value>
    </param>
    <param>
      <key>label</key>
      <value>Correlation sequence (Zadoff-Chu)</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>[complex(1,0),complex(-0.959492973614497,-0.281732556841430),complex(-0.654860733945284,-0.755749574354259),complex(-0.142314838273288,0.989821441880932),-complex(-0.959492973614497,0.281732556841430),-complex(0.415415013001886,0.909631995354519),complex(-0.959492973614501,0.281732556841419),complex(-0.142314838273291,0.989821441880932),complex(-0.654860733945281,-0.755749574354262),-complex(-0.959492973614493,-0.281732556841446),complex(1,-9.82193361864236e-16)]</value>
    </param>
  </block>
  <block>
    <key>parameter</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value>long</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>0</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(888, 4)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>zc</value>
    </param>
    <param>
      <key>label</key>
      <value>Correlation sequence (Zadoff-Chu)</value>
    </param>
    <param>
      <key>short_id</key>
      <value></value>
    </param>
    <param>
      <key>type</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>[1.00000000000000 + 0.00000000000000j,0.878221573370229 - 0.478253978621318j,0.0747300935864244 - 0.997203797181180j,-0.988830826225129 - 0.149042266176175j,0.270840468143005 + 0.962624246950012j,0.365341024366395 - 0.930873748644204j,-0.500000000000001 + 0.866025403784438j,0.173648177666931 - 0.984807753012208j,0.623489801858733 + 0.781831482468030j,-0.900968867902420 + 0.433883739117557j,-0.661685837596860 - 0.749781202967734j,0.0747300935864232 - 0.997203797181180j,0.365341024366399 - 0.930873748644203j,0.173648177666941 - 0.984807753012206j,-0.499999999999996 - 0.866025403784441j,-0.988830826225129 + 0.149042266176174j,0.270840468143001 + 0.962624246950013j,0.623489801858741 - 0.781831482468024j,-0.900968867902418 + 0.433883739117562j,0.878221573370231 - 0.478253978621314j,-0.500000000000008 + 0.866025403784434j,-0.499999999999994 - 0.866025403784442j,0.878221573370228 - 0.478253978621319j,0.826238774316003 + 0.563320058063611j,0.365341024366398 + 0.930873748644203j,0.270840468142977 + 0.962624246950020j,0.623489801858712 + 0.781831482468047j,1.00000000000000 + 2.15587355100861e-14j,0.173648177666940 - 0.984807753012207j,-0.988830826225127 + 0.149042266176183j,0.826238774315981 + 0.563320058063643j,-0.661685837596840 - 0.749781202967751j,0.826238774315968 + 0.563320058063662j,-0.988830826225134 + 0.149042266176138j,0.173648177666894 - 0.984807753012215j,1.00000000000000 + 5.48790321370795e-14j,0.623489801858712 + 0.781831482468047j,0.270840468142956 + 0.962624246950026j,0.365341024366384 + 0.930873748644209j,0.826238774315981 + 0.563320058063642j,0.878221573370217 - 0.478253978621340j,-0.499999999999971 - 0.866025403784455j,-0.500000000000025 + 0.866025403784424j,0.878221573370238 - 0.478253978621301j,-0.900968867902421 + 0.433883739117554j,0.623489801858722 - 0.781831482468040j,0.270840468143045 + 0.962624246950001j,-0.988830826225135 + 0.149042266176134j,-0.499999999999997 - 0.866025403784441j,0.173648177667004 - 0.984807753012195j,0.365341024366526 - 0.930873748644153j,0.0747300935863980 - 0.997203797181182j,-0.661685837596838 - 0.749781202967753j,-0.900968867902404 + 0.433883739117591j,0.623489801858728 + 0.781831482468035j,0.173648177666975 - 0.984807753012200j,-0.500000000000068 + 0.866025403784399j,0.365341024366387 - 0.930873748644207j,0.270840468142883 + 0.962624246950047j,-0.988830826225141 - 0.149042266176091j,0.0747300935864645 - 0.997203797181177j,0.878221573370250 - 0.478253978621278j,1.00000000000000 + 4.50694781311690e-14j]</value>
    </param>
  </block>
  <connection>
    <source_block_id>blocks_char_to_float_0</source_block_id>
    <sink_block_id>qtgui_time_sink_x_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_complex_to_arg_0</source_block_id>
    <sink_block_id>blocks_delay_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_complex_to_arg_0</source_block_id>
    <sink_block_id>blocks_tag_gate_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_complex_to_float_0_0_0</source_block_id>
    <sink_block_id>qtgui_time_sink_x_0_0_0_1_0_0_0_0_0_0_0_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>1</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_complex_to_mag_squared_0</source_block_id>
    <sink_block_id>qtgui_time_sink_x_0_0_0_1_0_0_0_0_0_0_0_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_complex_to_mag_squared_0</source_block_id>
    <sink_block_id>tag2msg_sn</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_delay_0</source_block_id>
    <sink_block_id>blocks_sub_xx_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_float_to_complex_0</source_block_id>
    <sink_block_id>blocks_stream_mux_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_keep_m_in_n_0</source_block_id>
    <sink_block_id>blocks_stream_to_vector_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_keep_one_in_n_0</source_block_id>
    <sink_block_id>digital_costas_loop_cc_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_keep_one_in_n_1</source_block_id>
    <sink_block_id>blocks_keep_one_in_n_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_pdu_to_tagged_stream_0</source_block_id>
    <sink_block_id>blocks_tagged_stream_mux_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>1</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_pdu_to_tagged_stream_0</source_block_id>
    <sink_block_id>digital_protocol_formatter_bb_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_pdu_to_tagged_stream_0</source_block_id>
    <sink_block_id>virtual_sink_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_pdu_to_tagged_stream_0_0</source_block_id>
    <sink_block_id>qtgui_time_sink_x_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_repack_bits_bb_1</source_block_id>
    <sink_block_id>blocks_tagged_stream_to_pdu_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_repack_bits_bb_1</source_block_id>
    <sink_block_id>virtual_sink_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_repack_bits_bb_2_2</source_block_id>
    <sink_block_id>digital_diff_encoder_bb_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_stream_mux_0</source_block_id>
    <sink_block_id>blocks_stream_to_vector_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_stream_to_tagged_stream_0</source_block_id>
    <sink_block_id>blocks_tagged_stream_to_pdu_0_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_stream_to_vector_0</source_block_id>
    <sink_block_id>fft_vxx_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_stream_to_vector_1</source_block_id>
    <sink_block_id>fft_vxx_0_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_sub_xx_0_0</source_block_id>
    <sink_block_id>blocks_float_to_complex_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>1</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_sub_xx_0_0</source_block_id>
    <sink_block_id>blocks_float_to_complex_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_tag_gate_0</source_block_id>
    <sink_block_id>blocks_sub_xx_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>1</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_tag_gate_0_0</source_block_id>
    <sink_block_id>virtual_sink_0_1_0_0_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_tagged_stream_mux_0</source_block_id>
    <sink_block_id>blocks_repack_bits_bb_2_2</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_tagged_stream_to_pdu_0_0</source_block_id>
    <sink_block_id>data_slot_mux</sink_block_id>
    <source_key>pdus</source_key>
    <sink_key>data</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_tagged_stream_to_pdu_0_0_0</source_block_id>
    <sink_block_id>ephyl_sn_sched</sink_block_id>
    <source_key>pdus</source_key>
    <sink_key>in</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_throttle_0</source_block_id>
    <sink_block_id>channels_channel_model_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_vector_source_x_0</source_block_id>
    <sink_block_id>blocks_stream_mux_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>1</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_vector_to_stream_0</source_block_id>
    <sink_block_id>blocks_keep_one_in_n_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>channels_channel_model_0</source_block_id>
    <sink_block_id>blocks_complex_to_float_0_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>channels_channel_model_0</source_block_id>
    <sink_block_id>blocks_tag_gate_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>channels_channel_model_0_0</source_block_id>
    <sink_block_id>virtual_sink_0_1_1_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>data_slot_mux</source_block_id>
    <sink_block_id>blocks_message_debug_0</sink_block_id>
    <source_key>final_msg</source_key>
    <sink_key>print</sink_key>
  </connection>
  <connection>
    <source_block_id>data_slot_mux</source_block_id>
    <sink_block_id>blocks_socket_pdu_0</sink_block_id>
    <source_key>final_msg</source_key>
    <sink_key>pdus</sink_key>
  </connection>
  <connection>
    <source_block_id>data_slot_mux</source_block_id>
    <sink_block_id>virtual_sink_0_1_0_0_0_0</sink_block_id>
    <source_key>final_msg</source_key>
    <sink_key>in</sink_key>
  </connection>
  <connection>
    <source_block_id>dddd</source_block_id>
    <sink_block_id>channels_channel_model_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_chunks_to_symbols_xx_0</source_block_id>
    <sink_block_id>blocks_complex_to_arg_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_constellation_decoder_cb_0</source_block_id>
    <sink_block_id>virtual_sink_0_1_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_corr_est_cc_0_0</source_block_id>
    <sink_block_id>blocks_complex_to_mag_squared_0</sink_block_id>
    <source_key>1</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_corr_est_cc_0_0</source_block_id>
    <sink_block_id>blocks_null_sink_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_correlate_access_code_xx_ts_1</source_block_id>
    <sink_block_id>blocks_repack_bits_bb_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_costas_loop_cc_0</source_block_id>
    <sink_block_id>digital_constellation_decoder_cb_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_costas_loop_cc_0</source_block_id>
    <sink_block_id>qtgui_time_sink_x_0_0_0_1_0_0_0_0_0_0_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_diff_decoder_bb_0</source_block_id>
    <sink_block_id>digital_correlate_access_code_xx_ts_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_diff_encoder_bb_0</source_block_id>
    <sink_block_id>virtual_sink_0_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_ofdm_cyclic_prefixer_0</source_block_id>
    <sink_block_id>virtual_sink_0_1_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>digital_protocol_formatter_bb_0</source_block_id>
    <sink_block_id>blocks_tagged_stream_mux_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>ephyl_bs_core</source_block_id>
    <sink_block_id>blocks_keep_m_in_n_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>ephyl_bs_core</source_block_id>
    <sink_block_id>dddd</sink_block_id>
    <source_key>1</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>ephyl_data_and_access_control_0</source_block_id>
    <sink_block_id>virtual_sink_0_1_0_0_0</sink_block_id>
    <source_key>Array</source_key>
    <sink_key>in</sink_key>
  </connection>
  <connection>
    <source_block_id>ephyl_data_and_access_control_0</source_block_id>
    <sink_block_id>blocks_pdu_to_tagged_stream_0</sink_block_id>
    <source_key>Data</source_key>
    <sink_key>pdus</sink_key>
  </connection>
  <connection>
    <source_block_id>ephyl_data_and_access_control_0</source_block_id>
    <sink_block_id>blocks_pdu_to_tagged_stream_0_0</sink_block_id>
    <source_key>PER</source_key>
    <sink_key>pdus</sink_key>
  </connection>
  <connection>
    <source_block_id>ephyl_sn_sched</source_block_id>
    <sink_block_id>virtual_sink_0_1_0_0</sink_block_id>
    <source_key>busy</source_key>
    <sink_key>in</sink_key>
  </connection>
  <connection>
    <source_block_id>ephyl_sn_sched</source_block_id>
    <sink_block_id>blocks_throttle_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>fft_vxx_0</source_block_id>
    <sink_block_id>blocks_vector_to_stream_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>fft_vxx_0_0_0</source_block_id>
    <sink_block_id>digital_ofdm_cyclic_prefixer_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>file_source_slot_ctrl</source_block_id>
    <sink_block_id>virtual_sink_0_1_0_0_0</sink_block_id>
    <source_key>Array</source_key>
    <sink_key>in</sink_key>
  </connection>
  <connection>
    <source_block_id>file_source_slot_ctrl</source_block_id>
    <sink_block_id>blocks_pdu_to_tagged_stream_0</sink_block_id>
    <source_key>Data</source_key>
    <sink_key>pdus</sink_key>
  </connection>
  <connection>
    <source_block_id>file_source_slot_ctrl</source_block_id>
    <sink_block_id>blocks_pdu_to_tagged_stream_0_0</sink_block_id>
    <source_key>PER</source_key>
    <sink_key>pdus</sink_key>
  </connection>
  <connection>
    <source_block_id>tag2msg</source_block_id>
    <sink_block_id>data_slot_mux</sink_block_id>
    <source_key>slot_msg</source_key>
    <sink_key>slot_n</sink_key>
  </connection>
  <connection>
    <source_block_id>tag2msg_0</source_block_id>
    <sink_block_id>data_slot_mux</sink_block_id>
    <source_key>slot_msg</source_key>
    <sink_key>frame_n</sink_key>
  </connection>
  <connection>
    <source_block_id>tag2msg_sn</source_block_id>
    <sink_block_id>ephyl_sn_sched</sink_block_id>
    <source_key>bcn_trig</source_key>
    <sink_key>trig</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_0</source_block_id>
    <sink_block_id>blocks_char_to_float_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0</source_block_id>
    <sink_block_id>ephyl_data_and_access_control_0</sink_block_id>
    <source_key>out</source_key>
    <sink_key>busy</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0</source_block_id>
    <sink_block_id>file_source_slot_ctrl</sink_block_id>
    <source_key>out</source_key>
    <sink_key>busy</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0_0</source_block_id>
    <sink_block_id>digital_chunks_to_symbols_xx_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0_1</source_block_id>
    <sink_block_id>blocks_stream_to_tagged_stream_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0_2</source_block_id>
    <sink_block_id>ephyl_sn_sched</sink_block_id>
    <source_key>out</source_key>
    <sink_key>slot</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0_2_0</source_block_id>
    <sink_block_id>ephyl_bs_core</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0_2_1</source_block_id>
    <sink_block_id>digital_diff_decoder_bb_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0_2_1</source_block_id>
    <sink_block_id>tag2msg</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0_2_1</source_block_id>
    <sink_block_id>tag2msg_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0_2_2</source_block_id>
    <sink_block_id>digital_corr_est_cc_0_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0_3</source_block_id>
    <sink_block_id>ephyl_data_and_access_control_0</sink_block_id>
    <source_key>out</source_key>
    <sink_key>DL</sink_key>
  </connection>
  <connection>
    <source_block_id>virtual_source_1_2_0_3</source_block_id>
    <sink_block_id>file_source_slot_ctrl</sink_block_id>
    <source_key>out</source_key>
    <sink_key>DL</sink_key>
  </connection>
</flow_graph>
